<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alex Coding</title>
  
  <subtitle>A Place Where I Write Things.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.zhaochunqi.com/"/>
  <updated>2018-05-15T21:32:29.946Z</updated>
  <id>http://blog.zhaochunqi.com/</id>
  
  <author>
    <name>Alex Zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>系统的黑一下锤子</title>
    <link href="http://blog.zhaochunqi.com/2018/05/16/wo-chui-you-cheng-le/"/>
    <id>http://blog.zhaochunqi.com/2018/05/16/wo-chui-you-cheng-le/</id>
    <published>2018-05-16T03:57:00.000Z</published>
    <updated>2018-05-15T21:32:29.946Z</updated>
    
    <content type="html"><![CDATA[<p>罗老师，你负责认真，我们帮你赢。所以我在百忙之中帮您写了个软文，以期有更多的锤友们帮你赢。</p><a id="more"></a><p>经历了罗老师长达 2 个月微博上的宣传，终于我锤又要成了。为了系统性的黑锤子，我可是做足了功课。在所搜集资料的时候，我突然发自内心的想对罗老师说一声佩服:</p><blockquote><p>您跟您的团队明明几乎什么新鲜东西都没有，却还能时不时的开个发布会让锤粉们, 不，现在叫锤友们 high 一下，真的很厉害。</p></blockquote><h3 id="首先发布会还是一贯的套路"><a href="# 首先发布会还是一贯的套路" class="headerlink" title="首先发布会还是一贯的套路:"></a>首先发布会还是一贯的套路:</h3><p>如下图:</p><p><img src="https://i.imgur.com/YgwLC8o.jpg" alt="https://i.imgur.com/YgwLC8o.jpg"></p><p>(看不到图需翻墙)</p><h3 id="罗老师嘲讽一下友商"><a href="# 罗老师嘲讽一下友商" class="headerlink" title="罗老师嘲讽一下友商:"></a>罗老师嘲讽一下友商:</h3><blockquote><p>注意，为避免误会，下面的意思纯属我从发布会理解过来的，并非罗老师原话:</p></blockquote><ol><li>来，看看跑分，你小米，黑鲨手机，跑分常温下根本没你们说的那么高，你看，不光我测试了，有个媒体也测试了。不管不管，我最高，我定标准我来测。</li><li>跑分算什么啊，我们锤子不在乎跑分，无聊。我们不喜欢堆砌硬件（是吧，说你呢一加、小米）</li></ol><h3 id="嘲讽一下中国的开源"><a href="# 嘲讽一下中国的开源" class="headerlink" title="嘲讽一下中国的开源"></a>嘲讽一下中国的开源 </h3><blockquote><p> 注意，为避免误会，下面的意思纯属我从发布会理解过来的，并非罗老师原话:</p></blockquote><ol><li>我们的 OneStep 开源了吧，你看，我们为开源世界做出了贡献，其他厂商们，你们直接用就行了哦。</li><li>为啥不用？ 是因为用了要遵守我们的开源协议，给我们 credit 是吧? 垃圾 </li></ol><h3 id="我锤的开源"><a href="# 我锤的开源" class="headerlink" title="我锤的开源"></a> 我锤的开源 </h3><p> 真实的情况呢:</p><p>如下图:</p><p><img src="https://i.imgur.com/oxWp0jg.png" alt="https://i.imgur.com/oxWp0jg.png"></p><p>而且，锤子引以为傲的开源事业, 这是 ROM 开发者对您的评价 </p><blockquote><p> 较真的系统不更新安卓版本，不过 GMS 认证，不遵守开源协议，不做安全启动…</p></blockquote><p>听说您最近开源代码了， BootLoader 因为一些 bug 第三方也能解开了，第三方 ROM 终于能够适配了，可喜可贺。</p><p>有位锤友因为相信了您可以解锁 BootLoader , 第三方预装应用全部可以删除 ，跟你法庭上对峙，听说您还揪着不放:</p><p><img src="https://i.imgur.com/2kSQCwX.jpg" alt="https://i.imgur.com/2kSQCwX.jpg"></p><p>问题是，您干吗吹着牛逼呢？换句话说，您做婊子为何还要里个牌坊呢？</p><h3 id="TNT- 真他妈的革命性"><a href="#TNT- 真他妈的革命性" class="headerlink" title="TNT 真他妈的革命性"></a>TNT 真他妈的革命性 </h3><p> 革命性的创新，老实讲，我本来是没有报什么期待的，但是一看到这个，真的是想送您一首 <a href="http://url.cn/5vYvwT4" target="_blank" rel="noopener">《How Low》</a> (视频版见这里: <a href="https://www.youtube.com/watch?v=ox-lfowevqA" target="_blank" rel="noopener">https://www.youtube.com/watch?v=ox-lfowevqA</a>)</p><p>有个问题我想问您一下，明明就是 Android，为什么还能比 Android 快 30% 呢, 我仔细一想，您的意思难道是跟您之前的锤子搭载的 Android 比？<br><img src="https://i.imgur.com/Lv1mqNF.jpg" alt="https://i.imgur.com/Lv1mqNF.jpg"></p><h4 id="工作站"><a href="# 工作站" class="headerlink" title="工作站"></a>工作站 </h4><p> 请问您是对工作站有什么误解吗? 难道需要您的工作站仅仅是完成 PPT/EXCEL 和 王者荣耀?</p><h4 id="PPT-amp-EXCEl"><a href="#PPT-amp-EXCEl" class="headerlink" title="PPT &amp; EXCEl"></a>PPT &amp; EXCEl</h4><p>我不否认，可能您的所谓的 什么胶囊 一键生成 PPT 可能很好用。</p><p>但是，就您演示的 PPT 和 EXCEL 操作，什么效率提升 300%， 玉龙哥哥，您这是降低工作效率好吗？另外您演示的这些别家不是没有，真的不是没有，不仅有，而且比您这个做得好。只不过人家是为残障人士用的。</p><h4 id="售价"><a href="# 售价" class="headerlink" title="售价"></a>售价 </h4><p> 您这个售价确实不是为了赚钱，您的智商鉴定机虽然涨价了，但是效果应该更强了。</p><h4 id="捐赠 -OpenSSL-、FreeBSD"><a href="# 捐赠 -OpenSSL-、FreeBSD" class="headerlink" title="捐赠 OpenSSL 、FreeBSD"></a>捐赠 OpenSSL 、FreeBSD</h4><p>真的棒，这相声收入不错。</p><p>很感激您对开源事业做出的贡献。</p><h3 id="我为什么讨厌罗老师"><a href="# 我为什么讨厌罗老师" class="headerlink" title="我为什么讨厌罗老师?"></a>我为什么讨厌罗老师?</h3><p>来看一下罗老师是如何来给你下套的:</p><p><strong>英语培训时期 </strong></p><blockquote><p> 有思想的年轻人在哪里都不太合群……直到他们来到老罗英语培训 </p></blockquote><p> 这句话真的很有煽动性。 仔细一想，如果您去了老罗英语培训，您就属于有思想的那一群啦。 -&gt; （有思想哪有可能那么容易被煽动）</p><p><strong>在网上澄清精日 </strong></p><p><img src="https://i.imgur.com/VGLL1VE.png" alt="https://i.imgur.com/VGLL1VE.png"></p><blockquote><p> 常常被没有理解能力的人误会，被别有用心的人利用。</p></blockquote><p>如果您不能理解玉龙哥哥，那么要么您是没有理解能力，要么您是别有用心。</p><p><strong>说手机是为你们做的 </strong></p><blockquote><p> 如果有一天，傻逼都用我们的手机，你要知道，那是给你们做的。</p></blockquote><p>我有个问题了，罗老师，当一个人掏出他的锤子手机的时候，如何判断他是傻逼还是粉丝呢？ 所以它实际上处于一种介于傻逼和粉丝的中间态，对嘛？</p><p><strong>发布会举出小米、黑鲨手机跑分 </strong></p><blockquote><p> 我们是在室温，不光我们自己，还有其他媒体也测试过。</p></blockquote><p>暗示友商跑分作假，锤子天下第一。</p><p><strong>展示微软蓝屏、苹果五国 </strong></p><blockquote><p> 别人都不敢展示，但是我们敢。</p></blockquote><p>一口老血喷出来，别人做的系统，你做的什么？ ROM 开发就叫系统了？ 而且您这套路，碰瓷大公司，然后想让观众想到您跟微软苹果是一个阵线上的嘛？</p><p><strong>待补充..</strong></p><p>我会慢慢补充的，罗老师是打心眼里坏。</p><h2 id="最后"><a href="# 最后" class="headerlink" title="最后"></a>最后 </h2><p> 好多人都在讲王自如跟罗老师的争论罗老师赢了，大概忘了辩论的目的是为了锤子的销量了吧。</p><p><a href="https://www.zhihu.com/question/25015684/answer/29832927" target="_blank" rel="noopener">https://www.zhihu.com/question/25015684/answer/29832927</a></p><p><strong>我锤又成了。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;罗老师，你负责认真，我们帮你赢。所以我在百忙之中帮您写了个软文，以期有更多的锤友们帮你赢。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Macbook Pro late 2013 使用戴尔 U2518DR</title>
    <link href="http://blog.zhaochunqi.com/2018/05/11/mac-late-2013-use-dell-2518DR/"/>
    <id>http://blog.zhaochunqi.com/2018/05/11/mac-late-2013-use-dell-2518DR/</id>
    <published>2018-05-11T19:34:00.000Z</published>
    <updated>2018-05-15T21:32:29.946Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>按照说明书上直接按上去后显示模糊，开始找网上的方案看能否解决问题。</p></blockquote><a id="more"></a><h2 id="关闭系统保护"><a href="# 关闭系统保护" class="headerlink" title="关闭系统保护"></a>关闭系统保护 </h2><p> 开机进入恢复模式 <code>csrutil disable; reboot</code></p><h2 id="生成配置文件"><a href="# 生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件 </h2><p> 根据这里的指导生成配置文件并复制到指定文件夹中 </p><p><a href="https://comsysto.github.io/Display-Override-PropertyList-File-Parser-and-Generator-with-HiDPI-Support-For-Scaled-Resolutions/" target="_blank" rel="noopener">Scaled Resolutions for your MacBooks external Monitor | by Comsysto Reply</a></p><p> 附注： 我的配置文件地址 -&gt; <a href="https://www.dropbox.com/s/4ucfat6cwcqmvnk/DisplayProductID-413c.plist?dl=0" target="_blank" rel="noopener">Dropbox - DisplayProductID-413c.plist</a></p><h2 id="安装 -RDM"><a href="# 安装 -RDM" class="headerlink" title="安装 RDM"></a>安装 RDM</h2><p>RDM 可以在这里下载 <a href="http://avi.alkalay.net/software/RDM/" target="_blank" rel="noopener">Index of /software/RDM</a></p><p>另外这是 github 介绍页 <a href="https://github.com/avibrazil/RDM" target="_blank" rel="noopener">GitHub - avibrazil/RDM: Easily set Mac Retina display to higher unsupported resolutions</a></p><p>设置 display 2 为 <code>1920 x 1080</code> 终于完美了！</p><p>放张图吧:</p><p><img src="https://i.imgur.com/tCDNw8f.jpg" alt="https://i.imgur.com/tCDNw8f.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;按照说明书上直接按上去后显示模糊，开始找网上的方案看能否解决问题。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="mac" scheme="http://blog.zhaochunqi.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Mac 下 JAVA 8 与 JAVA 9 共存与切换</title>
    <link href="http://blog.zhaochunqi.com/2018/03/09/add-java8-along-with-java9/"/>
    <id>http://blog.zhaochunqi.com/2018/03/09/add-java8-along-with-java9/</id>
    <published>2018-03-09T00:16:00.000Z</published>
    <updated>2018-05-15T21:32:29.942Z</updated>
    
    <content type="html"><![CDATA[<p>由于系统崩溃，上个星期重新安装了系统之后就安装了 <code>JDK 9</code>， 但由于使用 <code>JDK 9</code> 时， <code>Lombok</code> 会出现一堆 bug，无奈只能再安装 <code>JDK 1.8</code>。</p><a id="more"></a><h2 id="安装"><a href="# 安装" class="headerlink" title="安装"></a>安装 </h2><p> 正常安装 <code>JDK 1.8</code> 和 <code>JDK 9</code> 即可, <code>JAVA 8</code> 对应的就是 <code>JDK 1.8</code>，<code>JAVA 9</code> 对应的 <code>JDK 9</code>。</p><p>安装地址: <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><h2 id="切换"><a href="# 切换" class="headerlink" title="切换"></a>切换 </h2><p> 安装好之后，可以使用如下命令找到 <code>JAVA 8</code> 和 <code>JAVA 9</code> 的位置。</p><ul><li>JAVA 8</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/java_home  -v 1.8</span><br></pre></td></tr></table></figure><ul><li>JAVA 9</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/use/libexec/java_home -v 9</span><br></pre></td></tr></table></figure><p>在 .zshrc 或 .bashrc 中，添加如下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 JDK 8</span></span><br><span class="line"><span class="built_in">export</span> JAVA_8_HOME=`/usr/libexec/java_home -v 1.8`</span><br><span class="line"><span class="comment"># 设置 JDK 9</span></span><br><span class="line"><span class="built_in">export</span> JAVA_9_HOME=`/usr/libexec/java_home -v 9.0`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认 JDK 8</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="variable">$JAVA_8_HOME</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态切换版本 </span></span><br><span class="line"><span class="built_in">alias</span> jdk8=<span class="string">"export JAVA_HOME=<span class="variable">$JAVA_8_HOME</span>"</span></span><br><span class="line"><span class="built_in">alias</span> jdk9=<span class="string">"export JAVA_HOME=<span class="variable">$JAVA_9_HOME</span>"</span></span><br></pre></td></tr></table></figure><p> 即可，可以直接使用命令 <code>jdk9</code> 切换成 JAVA 9.</p><h2 id="Intellij-Idea- 修改 -JDK"><a href="#Intellij-Idea- 修改 -JDK" class="headerlink" title="Intellij Idea 修改 JDK"></a>Intellij Idea 修改 JDK</h2><p><code>File</code> -&gt; <code>Project Structure</code> -&gt; <code>Project</code> -&gt; <code>Project SDK</code> 中新增 <code>JAVA 8</code> 的 SDK 即可 </p><p> 参考链接: <a href="http://chessman-126-com.iteye.com/blog/2162466" target="_blank" rel="noopener">http://chessman-126-com.iteye.com/blog/2162466</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于系统崩溃，上个星期重新安装了系统之后就安装了 &lt;code&gt;JDK 9&lt;/code&gt;， 但由于使用 &lt;code&gt;JDK 9&lt;/code&gt; 时， &lt;code&gt;Lombok&lt;/code&gt; 会出现一堆 bug，无奈只能再安装 &lt;code&gt;JDK 1.8&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://blog.zhaochunqi.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>介绍一个非常好用的 Javascript 工具 - QuokkaJS</title>
    <link href="http://blog.zhaochunqi.com/2018/03/06/a-great-javascript-tool-quokkajs/"/>
    <id>http://blog.zhaochunqi.com/2018/03/06/a-great-javascript-tool-quokkajs/</id>
    <published>2018-03-06T22:46:00.000Z</published>
    <updated>2018-05-15T21:32:29.942Z</updated>
    
    <content type="html"><![CDATA[<p>今天介绍一下 <a href="https://quokkajs.com/" target="_blank" rel="noopener">Quokka JS</a>, 我这段时间写 JS 多亏了这个插件。</p><a id="more"></a><h2 id="介绍"><a href="# 介绍" class="headerlink" title="介绍"></a>介绍 </h2><p> 我是在 Youtube 上看 《Fun Fun Function》 的时候发现的这样的一款插件，插件能够实时看到 js 代码中元素的类型以及运行的结果。</p><p>如下图演示的效果 </p><p><img src="https://i.imgur.com/qDied5b.gif" alt="https://i.imgur.com/qDied5b.gif"></p><h2 id="安装"><a href="# 安装" class="headerlink" title="安装"></a> 安装 </h2><p> 可以直接根据官网的教程进行安装，我个人感觉 Visual Studio Code 上的插件比 Intellij idea 上的插件功能多一些。</p><h2 id="使用"><a href="# 使用" class="headerlink" title="使用"></a>使用 </h2><p> 使用方法简单介绍下:</p><blockquote><ol><li>安装好 Visual Studio Code 之后，可以新建一个文件，然后 <code>CMD +SHIFT + P</code> -&gt; <code>Start On Current File</code></li></ol></blockquote><p><img src="https://i.imgur.com/cLLJvpA.png" alt="https://i.imgur.com/cLLJvpA.png"></p><blockquote><ol start="2"><li>然后就可以进行编程了。</li></ol></blockquote><p>简单做了一个演示的小视频</p><p><iframe src="https://player.vimeo.com/video/258810119" width="640" height="400" frameborder="0" webkitallowfullscreen=""mozallowfullscreen="" allowfullscreen></iframe></p><p><a href="https://vimeo.com/258810119" target="_blank" rel="noopener">A demo on how to use quokkajs</a> from <a href="https://vimeo.com/user64572850" target="_blank" rel="noopener">Alex Zhao</a> on <a href="https://vimeo.com" target="_blank" rel="noopener">Vimeo</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天介绍一下 &lt;a href=&quot;https://quokkajs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Quokka JS&lt;/a&gt;, 我这段时间写 JS 多亏了这个插件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.zhaochunqi.com/tags/javascript/"/>
    
      <category term="tools" scheme="http://blog.zhaochunqi.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>AWS Batch 介绍与实践</title>
    <link href="http://blog.zhaochunqi.com/2018/01/21/aws-batch-and-some-others/"/>
    <id>http://blog.zhaochunqi.com/2018/01/21/aws-batch-and-some-others/</id>
    <published>2018-01-21T23:10:00.000Z</published>
    <updated>2018-05-15T21:32:29.942Z</updated>
    
    <content type="html"><![CDATA[<p>最近，我们在一个项目中使用到了 AWS Batch，特通过这篇博客来记录一下。</p><a id="more"></a><h2 id="什么是 -Batch"><a href="# 什么是 -Batch" class="headerlink" title="什么是 Batch ?"></a>什么是 Batch ?</h2><p>官方介绍:</p><blockquote><p>AWS Batch 让开发人员、科学家和工程师能够轻松高效地在 AWS 上运行成千上万项批处理计算任务。AWS Batch 可根据提交的批处理任务的数量和特定资源要求，动态预置计算资源 (CPU 或 内存优化型实例) 的最佳数量和类型。借助 AWS Batch，您无需安装和管理运行您的任务所使用的批处理计算软件或服务器群集，从而使您能够专注于分析结果和解决问题。AWS Batch 可以跨多种 AWS 计算服务和功能 (如 Amazon EC2 和竞价型实例) 计划、安排和执行您的批处理计算工作负载。</p></blockquote><p>简单来说，Batch 是可以预定义执行任务所需的计算机资源，然后在任务触发时能够自动创建对应的实例。</p><h2 id="Batch- 好处"><a href="#Batch- 好处" class="headerlink" title="Batch 好处"></a>Batch 好处 </h2><p> 据官网的描述,batch 有如下的优势:</p><ul><li><p>完全托管 </p><p> 借助 AWS Batch，您无需运行第三方商业或开源批处理解决方案，也无需安装或管理批处理软件或服务器。AWS Batch 可为您管理所有基础设施，从而避免了预置、管理、监控和扩展您的批处理计算任务所带来的复杂性。</p></li><li><p>与 AWS 集成 </p><p>AWS Batch 已与 AWS 平台进行本地集成，让您能够利用 AWS 的扩展、联网和访问管理功能。这便于您轻松运行能够安全地从 AWS 数据存储 (如 Amazon S3 和 Amazon DynamoDB) 中检索数据并向其中写入数据的任务。</p></li><li><p> 成本优化的资源预置 </p><p>AWS Batch 可根据所提交的批处理任务的数量和资源要求预置计算资源并优化任务分配。AWS Batch 能够将计算资源动态扩展至运行您的批处理任务所需的任何数量，从而使您不必受固定容量群集的限制。此外，AWS Batch 还可代表您针对竞价型实例动态出价，从而进一步降低运行您的批处理任务而产生的费用。</p></li></ul><h2 id="典型的应用场景"><a href="# 典型的应用场景" class="headerlink" title="典型的应用场景"></a> 典型的应用场景 </h2><h3 id="金融服务 -–- 交易后分析"><a href="# 金融服务 -–- 交易后分析" class="headerlink" title="金融服务 – 交易后分析"></a> 金融服务 – 交易后分析 </h3><p> 自动分析每天的交易费用、执行报告和市场绩效。</p><p><img src="http://harchiko.qiniudn.com/Dilithium_flowchart%20diagrams_v3_kw-02.322877d73eda8ed71a44db216a1d195550befac0" alt="http://harchiko.qiniudn.com/Dilithium_flowchart%20diagrams_v3_kw-02.322877d73eda8ed71a44db216a1d195550befac0"></p><h3 id="数字媒体：视觉效果呈现"><a href="# 数字媒体：视觉效果呈现" class="headerlink" title="数字媒体：视觉效果呈现"></a>数字媒体：视觉效果呈现 </h3><p> 自动处理内容呈现工作负载，并通过执行依赖关系或资源排程降低人为干预的必要性。</p><p><img src="http://harchiko.qiniudn.com/Dilithium-Diagrams_Visual-Effects-Rendering.ad9c0479c3772c67953e96ef8ae76a5095373d81" alt="http://harchiko.qiniudn.com/Dilithium-Diagrams_Visual-Effects-Rendering.ad9c0479c3772c67953e96ef8ae76a5095373d81"></p><h2 id="如何使用 -Batch"><a href="# 如何使用 -Batch" class="headerlink" title="如何使用 Batch"></a>如何使用 Batch</h2><p>下面以我们实际的应用场景来说明如何使用 Batch.</p><p>我们的场景类似上面的金融服务交易后分析:</p><p>1. 一个随时更新的 xml 文件。</p><ol start="2"><li>需要每天定时检查更新，发现 xml 更新后需要更新对应的文件到相关的 S3 中。</li><li>更新完相关的文件之后，需要启动另一分析程序，分析更新后的 xml 文件，将相关的内容上传到另外的云服务中。</li></ol><p>所以目前的结构是这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+-----------+    +------+   +-----+    +---+    +------+    +-----+</span><br><span class="line">|cloud watch+--&gt; |lambda+--&gt;+batch| +-&gt;+SNS| +&gt; |lambda| +-&gt;+batch|</span><br><span class="line">+-----------+    +------+   +-----+    +---+    +------+    +-----+</span><br></pre></td></tr></table></figure><p>cloud watch 用来做定时任务，定时通过 Lambda 触发相关的 Batch， batch 发现 xml 更新之后会发送通知到 SNS, 由 SNS 来触发 lambda, 然后由 lambda 启用 Batch 。</p><h3 id="Lambda-Function"><a href="#Lambda-Function" class="headerlink" title="Lambda Function"></a>Lambda Function</h3><p>可以看到 lambda 在我们整个系统中起着很重要的作用，用来接收 cloud watch 的定时任务，用来接收 SNS 传递过来的信息。</p><ul><li>第一个 Lambda 我们需要接收来自 Cloud Watch 的信息，然后通过 Cloud Watch 的信息来启动相关的 Batch Job。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Loading function'</span>)</span><br><span class="line">batch = boto3.client(<span class="string">'batch'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lambda_handler</span><span class="params">(event, context)</span>:</span></span><br><span class="line">    <span class="comment"># Log the received event</span></span><br><span class="line">    print(<span class="string">"Received event:"</span> + json.dumps(event, indent=<span class="number">2</span>))</span><br><span class="line">    <span class="comment"># Get parameters for the SubmitJob call</span></span><br><span class="line">    <span class="comment"># http://docs.aws.amazon.com/batch/latest/APIReference/API_SubmitJob.html</span></span><br><span class="line">    jobName = event[<span class="string">'jobName'</span>]</span><br><span class="line">    jobQueue = event[<span class="string">'jobQueue'</span>]</span><br><span class="line">    jobDefinition = event[<span class="string">'jobDefinition'</span>]</span><br><span class="line">    <span class="comment"># containerOverrides and parameters are optional</span></span><br><span class="line">    <span class="keyword">if</span> event.get(<span class="string">'containerOverrides'</span>):</span><br><span class="line">        containerOverrides = event[<span class="string">'containerOverrides'</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        containerOverrides = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> event.get(<span class="string">'parameters'</span>):</span><br><span class="line">        parameters = event[<span class="string">'parameters'</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        parameters = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Submit a Batch Job</span></span><br><span class="line">        response = batch.submit_job(jobQueue=jobQueue, jobName=jobName, jobDefinition=jobDefinition,</span><br><span class="line">                                    containerOverrides=containerOverrides, parameters=parameters)</span><br><span class="line">        <span class="comment"># Log response from AWS Batch</span></span><br><span class="line">        print(<span class="string">"Response:"</span> + json.dumps(response, indent=<span class="number">2</span>))</span><br><span class="line">        <span class="comment"># Return the jobId</span></span><br><span class="line">        jobId = response[<span class="string">'jobId'</span>]</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'jobId'</span>: jobId</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        message = <span class="string">'Error submitting Batch Job'</span></span><br><span class="line">        print(message)</span><br><span class="line">        <span class="keyword">raise</span> Exception(message)</span><br></pre></td></tr></table></figure><p>我们需要由 Cloud Watch 传递相关的参数启动相关的 Batch。</p><ul><li>第二个 Lambda 见 <a href="#SNS">SNS</a> 部分。</li></ul><h3 id="Batch"><a href="#Batch" class="headerlink" title="Batch"></a>Batch</h3><p>在 Batch 启动镜像之前，我们需要先给机器配置做一个预定义，AWS 规定是必须有 jobDefinition ， 但是可以通过参数来覆盖一些 jobDefinition 的定义。</p><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202018-01-22%20at%209.54.07%20AM.png" alt="http://harchiko.qiniudn.com/Screen%20Shot%202018-01-22%20at%209.54.07%20AM.png"></p><p>点击 Create ，即可创建相关的 Batch definition，其中的 image 需要填入相关的 docker 镜像。</p><p>这里可以预先定义包括环境变量，运行环境，机器配置等一系列的东西。</p><p>配置完成之后可以现在 jobs 中测试一下 job 能否正常运行。</p><h3 id="cloud-watch"><a href="#cloud-watch" class="headerlink" title="cloud watch"></a>cloud watch</h3><p>1. 点击 cloud watch, 在其中选择 rules。</p><p><img src="http://harchiko.qiniudn.com/cloud-watch1.png" alt="http://harchiko.qiniudn.com/cloud-watch1.png"></p><ol start="2"><li>点击 create rules， 创建定时任务，这里我们需要将相关的参数传到 lambda 中。</li></ol><p>值得注意的是，cron 可能与 linux 下有所不同，参考: <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions" target="_blank" rel="noopener">https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions</a>。</p><p>在右边，我们选择 add target, lambda function。选择我们之前的 Lambda，选择 Configure input 下的 Constant，填入相关参数 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "jobName": "Lambda-Broadbean", // 随便写，job 的名字</span><br><span class="line">  "jobQueue": "feeds", // 注意跟 Batch 中的 Queue 对应</span><br><span class="line">  "jobDefinition": "feedstream-Broadbean" // 上面创建的 feedstream 的名字</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这样，一个能够定时触发的 Batch 就完成了，也就是前几个流程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+-----------+    +------+   +-----+ </span><br><span class="line">|cloud watch+--&gt; |lambda+--&gt;+batch|</span><br><span class="line">+-----------+    +------+   +-----+</span><br></pre></td></tr></table></figure><h3 id="SNS"><a href="#SNS" class="headerlink" title="SNS"></a>SNS</h3><p>我们需要通过 SNS 来传递信息到 Lambda 。</p><p>我们需要看一下 SNS 的消息格式 (删减了一些内容):</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Records"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"EventVersion"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">      <span class="attr">"EventSubscriptionArn"</span>: <span class="string">"arn:awe-4689-b71c-43657a0ce152"</span>,</span><br><span class="line">      <span class="attr">"EventSource"</span>: <span class="string">"aws:sns"</span>,</span><br><span class="line">      <span class="attr">"Sns"</span>: &#123;</span><br><span class="line">        <span class="attr">"SignatureVersion"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"Timestamp"</span>: <span class="string">"2018-01-20T04:06:35.010Z"</span>,</span><br><span class="line">        <span class="attr">"Signature"</span>: <span class="string">"i/FC0Z3XT5M4jhru0wP65dD4vaCDYwczszj8V+aCCJX7SCbY1A+X7FjdrSWDeEFMaCqQhg4Wq/ch204kMHg47k4NCQ00cLJmBNc9XnrLiQMuAv1pcSdYu3uWikTlJ8E95K7h6Y/kq2/Tq1f+ELu6r5jEMV3/pKxSaRrdXmTZOZzjQDJKTT1fGNWIgRFOA/Ey+gcaZ8Fg=="</span>,</span><br><span class="line">        <span class="attr">"SigningCertUrl"</span>: <span class="string">"https://sn1.pem"</span>,</span><br><span class="line">        <span class="attr">"MessageId"</span>: <span class="string">"28dcb39b-12da-551856c"</span>,</span><br><span class="line">        <span class="attr">"Message"</span>: <span class="string">"&#123;\"type\":\"lovelive\",\"jobXmlTag\":\"job\",\"gzipped\":true,\"emptyCDATA\":false&#125;&#125;"</span>,</span><br><span class="line">        <span class="attr">"MessageAttributes"</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">"Type"</span>: <span class="string">"Notification"</span>,</span><br><span class="line">        <span class="attr">"UnsubscribeUrl"</span>: <span class="string">"https://sns.us-eace152"</span>,</span><br><span class="line">        <span class="attr">"TopicArn"</span>: <span class="string">"arn:aws:sns:us-east-1:162141517946:start_feed_consumer"</span>,</span><br><span class="line">        <span class="attr">"Subject"</span>: <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 可以看到相关的 Message 内容都在 Records[0] -&gt; Message 下, 在 Lambda 中只需要 <code>event[&#39;Records&#39;][0][&#39;Sns&#39;][&#39;Message&#39;]</code> 即可获取相关的 Message 信息。然后通过解析此信息来启动 Batch。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Loading function'</span>)</span><br><span class="line"></span><br><span class="line">batch = boto3.client(<span class="string">'batch'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lambda_handler</span><span class="params">(event, context)</span>:</span></span><br><span class="line">    <span class="comment"># Log the received event.</span></span><br><span class="line">    print(<span class="string">"Received event:"</span> + json.dumps(event, indent=<span class="number">2</span>))</span><br><span class="line">    download_message = event[<span class="string">'Records'</span>][<span class="number">0</span>][<span class="string">'Sns'</span>][<span class="string">'Message'</span>]</span><br><span class="line">    <span class="comment"># Get parameters for the SubmitJob call</span></span><br><span class="line">    <span class="comment"># http://docs.aws.amazon.com/batch/latest/APIReference/API_SubmitJob.html</span></span><br><span class="line">    jobName = <span class="string">"lambda-feed-consumer"</span></span><br><span class="line">    jobQueue = <span class="string">"feeds"</span></span><br><span class="line">    jobDefinition = <span class="string">"FeedConsumer"</span></span><br><span class="line">    containerOverrides = &#123;</span><br><span class="line">        <span class="string">'environment'</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'name'</span>: <span class="string">'DOWNLOAD_MESSAGE'</span>,</span><br><span class="line">                <span class="string">'value'</span>: download_message</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'name'</span>: <span class="string">'PARALLELISM'</span>,</span><br><span class="line">                <span class="string">'value'</span>: <span class="number">15</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Submit a Batch Job</span></span><br><span class="line">        response = batch.submit_job(jobQueue=jobQueue, jobName=jobName, jobDefinition=jobDefinition,</span><br><span class="line">                                    containerOverrides=containerOverrides)</span><br><span class="line">        <span class="comment"># Log response from AWS Batch</span></span><br><span class="line">        print(<span class="string">"Response:"</span> + json.dumps(response, indent=<span class="number">2</span>))</span><br><span class="line">        <span class="comment"># Return the jobId</span></span><br><span class="line">        jobId = response[<span class="string">'jobId'</span>]</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'jobId'</span>: jobId</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        message = <span class="string">'Error submitting Batch Job'</span></span><br><span class="line">        print(message)</span><br><span class="line">        <span class="keyword">raise</span> Exception(message)</span><br></pre></td></tr></table></figure><p>这里的代码相对来说比较简单，这里其实可以直接调用上一个 Lambda 来启用 Batch。</p><p>至此，我们整个流程就完成了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+-----------+    +------+   +-----+    +---+    +------+    +-----+</span><br><span class="line">|cloud watch+--&gt; |lambda+--&gt;+batch| +-&gt;+SNS| +&gt; |lambda| +-&gt;+batch|</span><br><span class="line">+-----------+    +------+   +-----+    +---+    +------+    +-----+</span><br></pre></td></tr></table></figure><p>Q&amp;A</p><ol><li>为什么不使用 <code>Job depends on</code> 参数启用 job 呢?</li></ol><p>Batch 在启用 job 的时候有一个参数是 <code>Job depends on</code>, 如下图 <br><img src="http://harchiko.qiniudn.com/batch-job.png" alt="http://harchiko.qiniudn.com/batch-job.png"></p><p> 根据这里的文档: <a href="https://docs.aws.amazon.com/batch/latest/userguide/submit_job.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/batch/latest/userguide/submit_job.html</a></p><p><code>Job depends on</code> 的意思是在在其他的 job 结束之后，此 job 才能运行，我们这里通过在每一个项目结束之后，使用 SNS 来启动, 这里就不需要此参数了。</p><ol start="2"><li>为什么不直接使用 Batch 的定时，而直接使用 Cloud Watch ?</li></ol><p>一开始我们也是想使用 Batch 自己的定时任务，但是官方提供的文档 <a href="https://docs.aws.amazon.com/batch/latest/userguide/job_scheduling.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/batch/latest/userguide/job_scheduling.html</a> 中异常简单，并不了解如何来使用，咨询对 <code>AWS</code> 比较熟悉大牛之后，我们采用了 cloud watch 发送 event 到 lambda，然后使用 lambda 来启用 batch 的方法。</p><ol start="3"><li>为什么要使用 SNS?</li></ol><p>我们希望在上一个 Batch 任务执行完毕之后，使用其参数立即来构建另一个 Batch 任务。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，我们在一个项目中使用到了 AWS Batch，特通过这篇博客来记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="aws" scheme="http://blog.zhaochunqi.com/categories/aws/"/>
    
    
      <category term="batch" scheme="http://blog.zhaochunqi.com/tags/batch/"/>
    
  </entry>
  
  <entry>
    <title>使用 Charles 进行移动端抓包</title>
    <link href="http://blog.zhaochunqi.com/2018/01/07/using-charles/"/>
    <id>http://blog.zhaochunqi.com/2018/01/07/using-charles/</id>
    <published>2018-01-07T06:12:00.000Z</published>
    <updated>2018-05-15T21:32:29.946Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不管是测试还是开发人员，在实际工作过程中经常要查看请求链接，已经请求内容来定位到问题。这个时候，就需要我们来进行抓包。</p></blockquote><a id="more"></a><h2 id="工具"><a href="# 工具" class="headerlink" title="工具"></a>工具 </h2><p>–</p><p><strong> 抓包的工具 </strong> 其实还是挺多的，据我了解大概有 </p><ul><li>Fiddler （windows)</li><li>wireshark （比较高级，能够捕获各种各样的包，不局限与 http/https）</li><li>Anyproxy 阿里出的抓包工具，还具有一些其他的功能 （基于 node 和 web， 所以是全平台都可以使用）</li><li>Charles（windows &amp;&amp; mac）</li></ul><h2 id="原理"><a href="# 原理" class="headerlink" title="原理"></a> 原理 </h2><p> 抓包的原理实际上很简单：</p><p>本来，我们的请求是这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+----------+             +----------+</span><br><span class="line">|          |             |          |</span><br><span class="line">|  you     | +---------&gt; |  server  |</span><br><span class="line">|          |             |          |</span><br><span class="line">+----------+             +----------+</span><br></pre></td></tr></table></figure><p>因为我们要从中获取到数据，所以现在的请求方式是这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+----------+        +----------+       +------------+</span><br><span class="line">|          |        |          |       |            |</span><br><span class="line">|  you     +------&gt; |  charles | +---&gt; |   server   |</span><br><span class="line">|          |        |          |       |            |</span><br><span class="line">+----------+        +----------+       +------------+</span><br></pre></td></tr></table></figure><p>其实我们抓包的过程又可以称之为 <a href="https://www.wikiwand.com/zh-hans/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB" target="_blank" rel="noopener"> 中间人攻击 </a>。我们截获了终端到服务器的通讯消息，获取其中的内容。</p><h2 id="操作"><a href="# 操作" class="headerlink" title="操作"></a> 操作 </h2><p>–</p><p> 我比较偏爱 Charles。下面我们一 Charles 为例，演示一下如何进行抓包：</p><h3 id="安装"><a href="# 安装" class="headerlink" title="安装"></a>安装 </h3><p> 安装不是很复杂，需要注意的是，如果 windows 下 charles 不能正常工作，首先检查关闭防火墙能不能正常工作，如果可以的话，找到防火墙中关于 charles 的规则，启用规则重新打开防火墙即可。</p><h3 id="打开 -Charles"><a href="# 打开 -Charles" class="headerlink" title="打开 Charles"></a>打开 Charles</h3><p>在 Charles 中 </p><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202018-01-07%20at%203.14.39%20AM.png" alt=""></p><p> 简单介绍一下面板的功能:</p><ol><li>上面区域是所有请求链接显示的地方。</li><li>下面区域点击会看到详细的请求信息。</li></ol><h3 id=" 设置代理 "><a href="# 设置代理 "class="headerlink"title=" 设置代理 "></a>设置代理 </h3><p><code>Proxy -&gt; Proxy Settings</code> 中， <img src="http://harchiko.qiniudn.com/Screen%20Shot%202018-01-07%20at%203.25.08%20AM.png"alt=""></p><p><code>port</code>可以手动指定，也可以使用动态端口（我个人比较倾向于动态端口，缺点是每次都要来看一下端口，然后在手机上重新设置，但是使用某个固定端口经常有抓不到包的情况）</p><p>移动端，我们需要跟电脑在同一局域网内，获取到本机的 IP 地址，与端口号，配置手机的代理。</p><p><img src="http://harchiko.qiniudn.com/361515267100_.pic_hd.jpg" alt=""></p><p>我个人的配置如下:</p><p><img src="http://harchiko.qiniudn.com/371515267187_.pic_hd.jpg"alt=""></p><h3 id="抓包"><a href="# 抓包" class="headerlink" title="抓包"></a>抓包 </h3><p> 配置完成后，Charles 会出现是否允许请求，点击允许即可。</p><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202018-01-07%20at%203.35.37%20AM.png" alt=""></p><p>可以看到 charles 已经可以查看到请求的信息了。</p><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202018-01-07%20at%203.37.24%20AM.png"alt=""></p><h3 id="https- 抓包"><a href="#https- 抓包" class="headerlink" title="https 抓包"></a>https 抓包 </h3><p> 可以看到，有一些 method 上面是 connect ，里面的内容我们还是看不到，这些是 https 请求（https 就是为了防止中间人攻击的）。我们需要在移动端安装证书来信任 charles 。</p><p><code>Help -&gt; SSL Proxying</code> 找到对应的选项进行安装 </p><p> 然后在 charles 对应的网址下，选择 <code>Enable SSL Proxying</code></p><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202018-01-07%20at%203.47.48%20AM.png" alt=""></p><p>再次请求，即可看到请求结果。</p><h3 id=" 没有 -ssl- 代理前 "><a href="# 没有 -ssl- 代理前 "class="headerlink"title=" 没有 ssl 代理前 "></a>没有 ssl 代理前</h3><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202018-01-07%20at%203.49.23%20AM.png"alt=""></p><h3 id="ssl- 代理后"><a href="#ssl- 代理后" class="headerlink" title="ssl 代理后"></a>ssl 代理后</h3><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202018-01-07%20at%203.49.48%20AM.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;不管是测试还是开发人员，在实际工作过程中经常要查看请求链接，已经请求内容来定位到问题。这个时候，就需要我们来进行抓包。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="dev" scheme="http://blog.zhaochunqi.com/tags/dev/"/>
    
  </entry>
  
  <entry>
    <title>通过 logbook 来提升编程技能</title>
    <link href="http://blog.zhaochunqi.com/2017/12/04/write_logs_use_logbooks/"/>
    <id>http://blog.zhaochunqi.com/2017/12/04/write_logs_use_logbooks/</id>
    <published>2017-12-04T14:08:00.000Z</published>
    <updated>2018-05-15T21:32:29.946Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文通过介绍了一种通过 logbook 的记录来提高自己编程技能的简便方法。</p></blockquote><a id="more"></a><p>这篇文章是我在看了 <a href="https://routley.io/tech/2017/11/23/logbook.html?utm_campaign=CodeTengu&amp;utm_medium=rss&amp;utm_source=CodeTengu_108" target="_blank" rel="noopener">Using a logbook to improve your programming</a> 的记录。</p><h2 id="记录原则"><a href="# 记录原则" class="headerlink" title="记录原则"></a>记录原则 </h2><p>logbook 记录有几个原则:</p><ol><li> 考虑你要解决的问题是什么？</li><li>描述你用来解决问题的办法。</li><li>描述你使用此方法的过程。</li><li>记录，并查看是否有更好的方案。</li></ol><h2 id="编程使用的优点"><a href="# 编程使用的优点" class="headerlink" title="编程使用的优点"></a>编程使用的优点 </h2><ol><li> 分解大问题为小问题。</li><li>很容易在分散精力之后重新回到工作状态。</li><li>可以从你的日志中快速学习。你可以查看你使用过的方法，然后了解哪些方法奏效，哪些无用。</li></ol><h2 id="快捷方法"><a href="# 快捷方法" class="headerlink" title="快捷方法"></a>快捷方法 </h2><p> 定义此方法到 <code>.zshrc</code> 中.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">lb</span></span>() &#123;</span><br><span class="line">    vim ~/logbook/$(date <span class="string">'+%Y-%m-%d'</span>).md</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接:</p><ul><li><a href="https://routley.io/tech/2017/11/23/logbook.html?utm_campaign=CodeTengu&amp;utm_medium=rss&amp;utm_source=CodeTengu_108" target="_blank" rel="noopener">https://routley.io/tech/2017/11/23/logbook.html?utm_campaign=CodeTengu&amp;utm_medium=rss&amp;utm_source=CodeTengu_108</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;本文通过介绍了一种通过 logbook 的记录来提高自己编程技能的简便方法。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.zhaochunqi.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>使用 docker 进行 Minecraft 开服与备份</title>
    <link href="http://blog.zhaochunqi.com/2017/10/16/mincraft_in_docker/"/>
    <id>http://blog.zhaochunqi.com/2017/10/16/mincraft_in_docker/</id>
    <published>2017-10-16T10:18:00.000Z</published>
    <updated>2018-05-15T21:32:29.946Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>没有什么事情，是跟好友一起玩游戏更快乐的了。去年怂恿老夏入了一套正版的 Minecraft 之后，就一直考虑如何联机一起搞。如今我们两个虽然不在一个城市了，但并不妨碍一起继续玩游戏。</p></blockquote><a id="more"></a><h2 id="目标"><a href="# 目标" class="headerlink" title="目标"></a>目标 </h2><p> 从我决定开服起，我就给自己定下了以下目标:</p><ol><li>简单。</li><li>安全。</li></ol><p>所谓简单，我想要的是配置简单。 而安全，则是数据的安全。 我不希望那一天我的服务器发生灾难性事故，我的 Minecraft 存档毁于一旦。</p><h2 id="行动"><a href="# 行动" class="headerlink" title="行动"></a>行动 </h2><p> 毫无疑问，docker 是我的第一选择。</p><p>经过一番考虑，我选择了使用 dropbox 备份我的数据，在开启 Minecraft 的 docker 镜像之前，先将 dropbox 镜像建立起来。</p><h3 id="创建 -dropbox-container"><a href="# 创建 -dropbox-container" class="headerlink" title="创建 dropbox container"></a>创建 dropbox container</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name=dropbox -v /home/zcq_qiqi/Dbox/Dropbox:/dbox/Dropbox -v /home/zcq_qiqi</span><br><span class="line">/Dbox/.dropbox:/dbox/.dropbox janeczku/dropbox</span><br></pre></td></tr></table></figure><p>使用 <code>docker logs mc</code> 查看日志进行 dropbox 绑定。</p><p><img src="media/UsersdeveloperDesktopScreen-Shot-2017-10-16-at-10.14.54-AM-1.jpg" alt=""></p><p>进入 Container ，将一些无用的文件夹进行排除 </p><p><code>docker exec -t -i dropbox dropbox exclude add 1Password ithoughtsx Screenshots template Weekly\ Summary</code></p><p><strong> 注: 1Password ithoughtsx Screenshots template Weekly\ Summary 是排除的文件夹，请根据个人的文件夹进行排除 </strong></p><h3 id=" 创建 -Minecraft-Container"><a href="# 创建 -Minecraft-Container"class="headerlink"title=" 创建 Minecraft Container"></a> 创建 Minecraft Container</h3><p>创建 minecraft 文件夹 </p><p> 在宿主机上执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Dbox/Dropbox</span><br><span class="line">mkdir minecraft</span><br></pre></td></tr></table></figure><p>启动 Container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v /home/zcq_qiqi/Dbox/Dropbox/minecraft/data:/data -e TYPE=FORGE -p 25565:25565 -e EULA=TRUE </span><br><span class="line">-e VERSION=1.12.1 --name mc itzg/minecraft-server</span><br></pre></td></tr></table></figure><p><strong>这里固定了版本在 1.12.1，不固定的话 Minecraft 上级之后会登录不上。</strong></p><h2 id=" 结束 "><a href="# 结束 "class="headerlink"title=" 结束 "></a>结束 </h2><p> 只建立好了服务器只是第一步，如果你不想你的服务器被熊孩子乱搞的话，最好加一个白名单。</p><p>在 whitelist.json 中添加如下格式的用户信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line"> &#123;</span><br><span class="line"> &quot;name&quot;: &quot;archieant&quot;,</span><br><span class="line"> &quot;uuid&quot;: &quot;7c20d813-631e-4e9b-a3f0-977dac8b284d&quot;</span><br><span class="line"> &#125;,</span><br><span class="line"> &#123;</span><br><span class="line"> &quot;name&quot;: &quot;meihuayu&quot;,</span><br><span class="line"> &quot;uuid&quot;: &quot;a01e6c11-194d-41ca-a334-d6edbe25afc1&quot;</span><br><span class="line"> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果你想添加管理员权限, 在 ops.json 添加如下信息.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line"> &#123;</span><br><span class="line"> &quot;uuid&quot;: &quot;a01e6c11-194d-41ca-a334-d6edbe25afc1&quot;,</span><br><span class="line"> &quot;name&quot;: &quot;meihuayu&quot;,</span><br><span class="line"> &quot;level&quot;: 4,</span><br><span class="line"> &quot;bypassesPlayerLimit&quot;: false</span><br><span class="line"> &#125;,</span><br><span class="line"> &#123;</span><br><span class="line"> &quot;uuid&quot;: &quot;7c20d813-631e-4e9b-a3f0-977dac8b284d&quot;,</span><br><span class="line"> &quot;name&quot;: &quot;archieant&quot;,</span><br><span class="line"> &quot;level&quot;: 4,</span><br><span class="line"> &quot;bypassesPlayerLimit&quot;: false</span><br><span class="line"> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>​</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;没有什么事情，是跟好友一起玩游戏更快乐的了。去年怂恿老夏入了一套正版的 Minecraft 之后，就一直考虑如何联机一起搞。如今我们两个虽然不在一个城市了，但并不妨碍一起继续玩游戏。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://blog.zhaochunqi.com/tags/docker/"/>
    
      <category term="linux" scheme="http://blog.zhaochunqi.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>本周我学到了【2】</title>
    <link href="http://blog.zhaochunqi.com/2017/10/16/this_week_i_learned_2/"/>
    <id>http://blog.zhaochunqi.com/2017/10/16/this_week_i_learned_2/</id>
    <published>2017-10-16T09:47:00.000Z</published>
    <updated>2018-05-15T21:32:29.946Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本周我学到了第二期！这一期后面的 3 分钟演讲值得一看！</p></blockquote><a id="more"></a><p>本周我学到了以下内容:</p><h2 id="学习"><a href="# 学习" class="headerlink" title="学习"></a>学习 </h2><ol><li> 本周在公司电脑上安装了一台 centos 7，发现了 Centos 已经移除了 ipconfig 命令，取而代之的是 iproute。 原因是 ipconfig 已经十几年没有人维护了。原来的命令也有了一些改变， 比如 查看网址可以 ip a 了，可以看下这篇文章来熟悉下。 <a href="https://www.linux.com/learn/replacing-ifconfig-ip" target="_blank" rel="noopener">https://www.linux.com/learn/replacing-ifconfig-ip</a></li><li><a href="https://zhaochunqi.com/2017/10/16/mincraft_in_docker/" target="_blank" rel="noopener">使用 docker 进行 Minecraft 开服与备份 </a> 这是我自己的博客文章，分享了使用 dropbox 镜像和 Minecraft 镜像来进行 Minecraft 开服和备份的操作。</li><li><a href="https://daily.zhihu.com/story/9456555" target="_blank" rel="noopener"> 招聘时的「N 年编程经验」，实际是在要求什么？</a> 我们经常在 jd 中看到关于编程经验的要求，可曾想过，他们想要的究竟是什么？知乎的这篇文章或许会给你一些答案。</li><li><a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener">dockcloud 加速 </a> 国内的 docker 镜像基本没有办法下载，使用 dockcloud 加速，效果明显。</li></ol><h2 id="生活"><a href="# 生活" class="headerlink" title="生活"></a> 生活 </h2><ol><li><a href="https://www.zhihu.com/question/36225746/answer/140211009?utm_source=com.ideashower.readitlater.pro&amp;utm_medium=social" target="_blank" rel="noopener"> 在家装里，最划算的投入是什么？</a> 最近在看一些家装，翻看了好多类似的文章，这篇的东西很对我的胃口。</li><li><a href="http://liqi.io/sharing86/" target="_blank" rel="noopener">优秀的思想值得传播，他们推荐了这 9 个演讲</a> 这几个文章我还没来得及看，但肯定是要看的了。</li></ol><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1flzvpaggyfj31kw0tqkjl.jpg" alt="https://ws2.sinaimg.cn/large/006tNc79ly1flzvpaggyfj31kw0tqkjl.jpg"></p><p>​</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;本周我学到了第二期！这一期后面的3分钟演讲值得一看！&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="weekly" scheme="http://blog.zhaochunqi.com/categories/weekly/"/>
    
    
  </entry>
  
  <entry>
    <title>本周我学到了【1】</title>
    <link href="http://blog.zhaochunqi.com/2017/10/08/this_week_i_learned_1/"/>
    <id>http://blog.zhaochunqi.com/2017/10/08/this_week_i_learned_1/</id>
    <published>2017-10-08T09:45:00.000Z</published>
    <updated>2018-05-15T21:32:29.946Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本周我学到了第一期！</p></blockquote><a id="more"></a><h2 id="学习"><a href="# 学习" class="headerlink" title="学习"></a>学习 </h2><p>• <a href="https://android.jlelse.eu/7-reasons-this-android-code-style-improves-your-productivity-65d196fa55f" target="_blank" rel="noopener">7 reasons this Android Code Style improves your productivity</a></p><blockquote><p> 对于 Android 开发来说很有用的代码规范，是对默认的 Android Studio 提供的代码规范的一种改进。</p><p>支持 kotlin，我最喜欢的是 xml 中的 id 放在首行 </p><p> 安装使用非常简单，无需什么额外的学习成本 </p></blockquote><p>• <a href="https://sspai.com/post/41022" target="_blank" rel="noopener"> 给你 48 小时，能做出什么样的游戏？——Ludum Dare 限时游戏制作竞赛 </a></p><blockquote><p> 少数派的这篇文章简直给我打开了新世界的大门。</p><p>我对着文中提到的 B 站的文章看了一个小时。</p></blockquote><p>• <a href="https://youtu.be/7kVeCqQCxlk" target="_blank" rel="noopener">YOUTUBE:CSS Grid Changes EVERYTHING - Amazing Presentation</a></p><blockquote><p>厌烦了 HTML 中一层又一层的 div 来实现网页效果？</p><p>不使用 JavaScript 如何 Responsive Design？</p><p>试试 CSS Grid 吧，觉得兼容性不够为时尚早？— 世界上本没有路，走的人多了，也变成了路。</p><p>演讲者还提写了篇博客来介绍： <a href="https://www.smashingmagazine.com/2017/06/building-production-ready-css-grid-layout/" target="_blank" rel="noopener">Building Production-Ready CSS Grid Layouts Today</a></p></blockquote><h2 id="生活"><a href="# 生活" class="headerlink" title="生活"></a>生活 </h2><p>• <a href="https://daily.zhihu.com/story/9544475" target="_blank" rel="noopener"> 鲜辣开胃，香而不腻的蒜泥白肉，是最送饭的一道凉菜 </a></p><blockquote><p> 这道菜简直太对我的胃口了，简单易做。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;本周我学到了第一期！&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="weekly" scheme="http://blog.zhaochunqi.com/categories/weekly/"/>
    
    
  </entry>
  
  <entry>
    <title>一个 workflowy 的 Markdown 实时预览插件</title>
    <link href="http://blog.zhaochunqi.com/2017/03/02/workflowy-markdown-preivew-script/"/>
    <id>http://blog.zhaochunqi.com/2017/03/02/workflowy-markdown-preivew-script/</id>
    <published>2017-03-02T01:34:00.000Z</published>
    <updated>2018-05-15T21:32:29.946Z</updated>
    
    <content type="html"><![CDATA[<p>最近几个月已经成了 workflowy 的重度用户，然而在昨天（2017-03-01) 写文档的过程中发现没有 markdown 支持，写起来少了很多乐趣。</p><a id="more"></a><p>从网上找到了 <a href="https://greasyfork.org/zh-CN/scripts/27429-workflowy-commonmark-live-preview" target="_blank" rel="noopener">workflowy-commonmark-live-preview</a>这款插件，使用下来发现 <strong>markdown 预览渲染在下方，实际看起来很不方便</strong>。</p><p> 所以我就自己改了一个。</p><p>效果如下：</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1flzgnwla5cg312i0jeb29.gif" alt="http://harchiko.qiniudn.com/markdown-script-preview.gif"></p><p>下载链接： <a href="https://greasyfork.org/zh-CN/scripts/27784-workflowy-markdown-live-preview" target="_blank" rel="noopener">https://greasyfork.org/zh-CN/scripts/27784-workflowy-markdown-live-preview</a> 欢迎试用并提出宝贵意见。</p><p>困死了，去睡觉。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近几个月已经成了 workflowy 的重度用户，然而在昨天（2017-03-01) 写文档的过程中发现没有 markdown 支持，写起来少了很多乐趣。&lt;/p&gt;
    
    </summary>
    
    
      <category term="workflowy" scheme="http://blog.zhaochunqi.com/tags/workflowy/"/>
    
  </entry>
  
  <entry>
    <title>微信推送从未如此简单 --Server 酱</title>
    <link href="http://blog.zhaochunqi.com/2016/12/30/simple_wechat_push/"/>
    <id>http://blog.zhaochunqi.com/2016/12/30/simple_wechat_push/</id>
    <published>2016-12-30T02:51:00.000Z</published>
    <updated>2018-05-15T21:32:29.946Z</updated>
    
    <content type="html"><![CDATA[<p>有一个非常简单的需求，每天查看一下以太坊的价格动向。</p><a id="more"></a><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1flzgswqwrej30jz0zk40d.jpg" alt="http://harchiko.qiniudn.com/WechatIMG27.jpeg"></p><h2 id="方法"><a href="# 方法" class="headerlink" title="方法"></a>方法 </h2><p> 以太坊价格通过查询 YUNBI 的 API 知道: <a href="https://yunbi.com/api/v2/tickers/ethcny.json" target="_blank" rel="noopener">https://yunbi.com/api/v2/tickers/ethcny.json</a> 可以得到。</p><p>推送用到工具 Server 酱， Server 酱用起来实在是太方便了，一个 get 请求，信息就直接推送到微信上了。</p><p>直接向 <code>http://sc.ftqq.com/[SCKEY(登入后可见)].send</code> 发送 GET 请求即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">接受两个参数：</span><br><span class="line"></span><br><span class="line">text：消息标题，最长为 256，必填。</span><br><span class="line">desp：消息内容，最长 64Kb，可空，支持 MarkDown。</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="# 代码" class="headerlink" title="代码"></a>代码 </h2><p> 使用 Python 来写:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'https://yunbi.com:443/api/v2/tickers/ethcny.json'</span>)</span><br><span class="line"></span><br><span class="line">json = r.json()</span><br><span class="line"></span><br><span class="line">ticker = json[<span class="string">'ticker'</span>]</span><br><span class="line">sell = ticker[<span class="string">'sell'</span>]</span><br><span class="line">buy = ticker[<span class="string">'buy'</span>]</span><br><span class="line">last = ticker[<span class="string">'last'</span>]</span><br><span class="line">vol = ticker[<span class="string">'vol'</span>]</span><br><span class="line">high = ticker[<span class="string">'high'</span>]</span><br><span class="line">low = ticker[<span class="string">'low'</span>]</span><br><span class="line"></span><br><span class="line">price =  <span class="string">u"* 最高:"</span>+high+<span class="string">u"\n* 最低:"</span>+low+<span class="string">u"\n* 卖价:"</span>+sell+<span class="string">u"\n* 买价:"</span>+buy+<span class="string">u"\n* 上次成交:"</span>+last+<span class="string">u"\n* 成交量:"</span>+vol</span><br><span class="line"></span><br><span class="line">payload = &#123;<span class="string">'text'</span>:<span class="string">u'以太坊最新价格'</span>, <span class="string">'desp'</span>: price&#125;</span><br><span class="line">requests.get(<span class="string">'http://sc.ftqq.com/[Your Own Token].send'</span>, params=payload)</span><br></pre></td></tr></table></figure><p>需要安装下 python requests 包 </p><p><code>pip install requests</code></p><p> 设置下 crontab 任务，这样每天就可以推送价格了。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1flzgt07evyj30jz0zk75i.jpg" alt="http://harchiko.qiniudn.com/WechatIMG26.jpeg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一个非常简单的需求，每天查看一下以太坊的价格动向。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://blog.zhaochunqi.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>PHP 学习资料</title>
    <link href="http://blog.zhaochunqi.com/2016/12/14/php-learning-materials/"/>
    <id>http://blog.zhaochunqi.com/2016/12/14/php-learning-materials/</id>
    <published>2016-12-14T14:26:00.000Z</published>
    <updated>2018-05-15T21:32:29.946Z</updated>
    
    <content type="html"><![CDATA[<p>简单记录下 PHP 学习资料备忘。</p><a id="more"></a><h2 id="资料"><a href="# 资料" class="headerlink" title="资料"></a>资料 </h2><h3 id="视频"><a href="# 视频" class="headerlink" title="视频"></a> 视频 </h3><ul><li><a href="http://open.163.com/special/opencourse/buildingdynamicwebsites.html" target="_blank" rel="noopener"> 网易哈佛公开课 </a></li><li>Laracast/Laravel</li></ul><h3 id="文字 -amp- 书籍"><a href="# 文字 -amp- 书籍" class="headerlink" title="文字 &amp; 书籍"></a> 文字 &amp; 书籍 </h3><ul><li><a href="http://php.net/manual/zh/" target="_blank" rel="noopener">PHP 手册</a></li><li><a href="http://psysh.org/" target="_blank" rel="noopener">Psysh</a> 可以随时试验代码 </li><li><a href="https://packagist.org/explore/popular" target="_blank" rel="noopener">packagist 流行的包</a></li><li> 书籍 《 Modern PHP》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单记录下 PHP 学习资料备忘。&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="http://blog.zhaochunqi.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Java Lambda 表达式（又名闭包 (Closure)/ 匿名函数 ) 笔记</title>
    <link href="http://blog.zhaochunqi.com/2016/11/15/java_lambda_expressions/"/>
    <id>http://blog.zhaochunqi.com/2016/11/15/java_lambda_expressions/</id>
    <published>2016-11-15T02:01:00.000Z</published>
    <updated>2018-05-15T21:32:29.946Z</updated>
    
    <content type="html"><![CDATA[<p>根据 <a href="https://jcp.org/en/jsr/detail?id=335" target="_blank" rel="noopener">JSR 335</a>, Java 终于在 Java 8 中引入了 Lambda 表达式。也称之为闭包或者匿名函数。</p><a id="more"></a><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1flzgw9sbtfj30jg08ct8r.jpg" alt="http://harchiko.qiniudn.com/Lambda%20Expression%20Java%208.png"></p><h2 id="JSR-335"><a href="#JSR-335" class="headerlink" title="JSR 335"></a>JSR 335</h2><p> 所谓的 JSR （Java Specification Requests） 全称叫做 Java 规范提案。简单来说就是向 Java 社区提交新的 API 或 服务 请求的提案。这些提案将作为 Java 社区进行 Java 语言开发的需求，引导着开发的方向。</p><p>JSR 335 的提案内容摘要如下：</p><blockquote><p>This JSR will extend the Java Programming Language Specification and the Java Virtual Machine Specification to support the following features:</p><ul><li>Lambda Expressions</li><li>SAM Conversion</li><li>Method References</li><li>Virtual Extension Methods</li></ul></blockquote><p>也就是如下几点：</p><ol><li>支持 lambda 表达式。</li><li>支持 SAM conversion 用来向前兼容。</li><li>方法引用 Method References</li><li>Virtual Extension Methods</li></ol><p>在 Java 8 中，以上均已经实现, 以上内容下文均有介绍。</p><h2 id="为什么需要 -Lambda- 表达式"><a href="# 为什么需要 -Lambda- 表达式" class="headerlink" title="为什么需要 Lambda 表达式?"></a>为什么需要 Lambda 表达式?</h2><p>Lambda 表达式，其实就是代码块。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1flzgwbdd9ij308l06v0st.jpg" alt="http://harchiko.qiniudn.com/56cabf5a499ed708%202.jpg"></p><h3 id="原来怎么处理"><a href="# 原来怎么处理" class="headerlink" title="原来怎么处理"></a>原来怎么处理 </h3><p> 在具体了解 lambda 之前，我们先往后退一步，看看之前我们是如何处理这些代码块的！</p><h4 id="例子一"><a href="# 例子一" class="headerlink" title="例子一"></a>例子一 </h4><p> 当决定在单独的线程运行某程序时，你这样做的 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">           doWork();</span><br><span class="line">     &#125;</span><br><span class="line">     ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p> 这样执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Worker w = <span class="keyword">new</span> Worker();</span><br><span class="line"><span class="keyword">new</span> Thread(w).start();</span><br></pre></td></tr></table></figure><p>Worker 中包含了你要执行的代码块。</p><h4 id="例子二"><a href="# 例子二" class="headerlink" title="例子二"></a>例子二 </h4><p> 如果你想实现根据字符串长度大小来排序，而不是默认的字母顺序，你可以自己来实现一个 Comparator 用来 Sort。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LengthComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String first, String second)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(first.length(), second.length());</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">Arrays.sort(strings, <span class="keyword">new</span> LengthComparator());</span><br></pre></td></tr></table></figure><h4 id="例子三"><a href="# 例子三" class="headerlink" title="例子三"></a>例子三 </h4><p> 另外一个例子，我选的是 Android 中的点击事件，同样是 Java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Hello World!"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="上面代码有什么问题呢？"><a href="# 上面代码有什么问题呢？" class="headerlink" title="上面代码有什么问题呢？"></a>上面代码有什么问题呢？</h3><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1flzgwdq0rwj30hs0d4q30.jpg" alt="http://harchiko.qiniudn.com/c718cee7.jpg"></p><p>它们都太复杂了啊！</p><blockquote><p>上述例子都是在某个类中实现某个接口，然后传递到另外一个方法中作为参数，然后用来执行。</p></blockquote><p>但是本质上，他们要传递的就是接口中那一个方法的实现而已啊！有必要先创建类，再实例化，再传递给调用的位置吗？</p><blockquote><p>因为 Java 是纯面向对象的语言，像其他语言那样随随便便传个方法过来，那可不行，必须要这样。</p></blockquote><p>在其他语言中你可能可以，但是，在 Java 中，不可以。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1flzgwf5406j307t06vwej.jpg" alt="http://harchiko.qiniudn.com/56cabf7011ab6750.jpg"></p><p>Java 设计人员为了 Java 的简洁跟连贯性，一直拒绝为 Java 添加这种功能。（这也是我喜欢 Java 而不喜欢 Python 的原因啊！！！)</p><p>经过多年的努力，开发人员终于找到了符合 Java 编程习惯的 Lambda 表达式！</p><h2 id="Lambda- 表达式语法 -Syntax"><a href="#Lambda- 表达式语法 -Syntax" class="headerlink" title="Lambda 表达式语法 (Syntax)"></a>Lambda 表达式语法(Syntax)</h2><p> 考虑下前面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer.compare(first.length(), second.length())</span><br></pre></td></tr></table></figure><p>first 和 second 都是 String 类型，Java 是强类型的语言，必须指定类型:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(String first, String second)</span><br><span class="line">     -&gt; Integer.compare(first.length(), second.length())</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1flzgwghv0jj30av0c6dg2.jpg" alt="http://harchiko.qiniudn.com/14365393725281065.jpg"></p><p>看到没有！第一个 Lambda 表达式诞生了！！输入、输出简洁明了！</p><blockquote><p>为什么叫 Lambda 呢，这个很多年以前，有位逻辑学家想要标准化的表示一些可以被计算的数学方程（实际上存在，但是很难被表示出来），他就用 ℷ 来表示。</p></blockquote><p>重新介绍一下 Java 中 Lambda 表达式的格式:</p><blockquote><p>(参数) -&gt; 表达式 </p></blockquote><h3 id="多返回值"><a href="# 多返回值" class="headerlink" title="多返回值"></a> 多返回值 </h3><p> 如果计算的结果并不由一个单一的表达式返回（换言之，返回值存在多种情况），使用“{}”，然后明确指定返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(String first, String second) -&gt; &#123;</span><br><span class="line">     <span class="keyword">if</span> (first.length() &lt; second.length()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (first.length() &gt; second.length()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无参数"><a href="# 无参数" class="headerlink" title="无参数"></a>无参数 </h3><p> 如果没有参数，则 “()”中就空着。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() -&gt; &#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) doWork(); &#125;</span><br></pre></td></tr></table></figure><h3 id="省略"><a href="# 省略" class="headerlink" title="省略"></a>省略 </h3><p> 如果参数的类型可以被推断出，则可以直接省略 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;String&gt; comp</span><br><span class="line">     = (first, second) <span class="comment">// Same as (String first, String second)</span></span><br><span class="line">        -&gt; Integer.compare(first.length(), second.length());</span><br></pre></td></tr></table></figure><p> 这里，first 和 second 可以被推断出是 String 类型，因为 是一个 String 类型的 Comparator。</p><p>如果单个参数可以被推断出，你连括号都可以省略：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventHandler&lt;ActionEvent&gt; listener = event -&gt;</span><br><span class="line">     System.out.println(<span class="string">"Thanks for clicking!"</span>);</span><br><span class="line">        <span class="comment">// Instead of (event) -&gt; or (ActionEvent event) -&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id="修饰符"><a href="# 修饰符" class="headerlink" title="修饰符"></a>修饰符 </h3><p> 你可以像对待其他方法一样，annotation，或者 使用 final 修饰符 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">final</span> String name) -&gt; ...</span><br><span class="line">    (<span class="meta">@NonNull</span> String name) -&gt; ...</span><br></pre></td></tr></table></figure><p><strong> 永远不要 </strong> 定义 result 的类型，lambda 表达式总是从上下文中推断出来的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(String first, String second) -&gt; Integer.compare(first.length(), second.length())</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="# 注意" class="headerlink" title="注意"></a>注意 </h3><p> 注意，在 lambda 表达式中，某些分支存在返回值，某些不存在返回值这样的情况是不允许的。<br>如 <code>(int x) -&gt; {if (x &gt;= 0) return 1; }</code>这样是非法的。</p><h2 id="函数式接口 -Functional-Interfaces-SAM"><a href="# 函数式接口 -Functional-Interfaces-SAM" class="headerlink" title="函数式接口 (Functional Interfaces/SAM)"></a> 函数式接口 (Functional Interfaces/SAM)</h2><blockquote><p> 要介绍 Java 中 lambda 表达式的实现，需要知道什么是 函数式接口。</p></blockquote><p>什么叫作函数式接口呢 (SAM)？</p><blockquote><p> 函数式接口指的是只定义了唯一的抽象方法的接口（除了隐含的 Object 对象的公共方法）， 因此最开始也就做 SAM 类型的接口（Single Abstract Method）。</p></blockquote><p>Lambda 表达式 <strong> 向前兼容 </strong> 这些接口。</p><h3 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h3><p>举个例子 Array.sort:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(words,</span><br><span class="line">     (first, second) -&gt; Integer.compare(first.length(), second.length()));</span><br></pre></td></tr></table></figure><p>Array.sort() 方法收到一个实现了 Comparable<string>接口的实例。</string></p><p>其实可以把 Lambda 表达式想象成一个方法，而非一个对象，一个可以传入一个接口的方法。</p><h3 id="OnClickListener"><a href="#OnClickListener" class="headerlink" title="OnClickListener"></a>OnClickListener</h3><p>再举个例子 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">button.setOnClickListener(event -&gt;</span><br><span class="line">     System.out.println(<span class="string">"Thanks for clicking!"</span>));</span><br></pre></td></tr></table></figure><p> 你看，是不是更易读了呢？</p><p>Lambda 表达式能够向前兼容这些 interfaces, 太棒了！ 那 Lambda 表达式还能干什么呢？</p><p>实际上，将函数式接口转变成 lambda 表达式是你在 Java 中 <strong> 唯一 </strong> 能做的事情。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1flzgwi9bdnj30er0ermyd.jpg" alt="http://harchiko.qiniudn.com/20150930185659_eMZyN.jpeg"></p><p>Why ？！！</p><p>在其他的语言中，你可以定义一些方便的方法类型，但在 Java 中，你甚至不能将一个 Lambda 表达式赋值给类型为 Object 的变量，因为 Object 变量不是一个 Functional Interface。</p><p>Java 的设计者们坚持使用熟悉的 interface 概念而不是为其引入新的 方法类型。</p><p>(这里我还要为设计者点赞！谨慎的设计，一方面降低了初学者的门槛，一方面方便了高级用户的使用。对比 python2 和 python3，升级的不兼容让很多人一直停留在 python2)</p><h2 id="Method-References"><a href="#Method-References" class="headerlink" title="Method References"></a>Method References</h2><p>能不能再简洁一点？有的时候我们所要做的事情不过是调用其他类中方法来处理事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">button.setOnClickListener(event -&gt; System.out.println(event));</span><br></pre></td></tr></table></figure><p>如果这样呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">button.setOnAction(System.out::println);</span><br></pre></td></tr></table></figure><p>表达式 <code>System.out::println</code> 属于一个方法引用（method reference）， 相当于 lambda 表达式 <code>x -&gt; System.out.println(x)</code></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1flzgwjw3krj30jg0jgmxy.jpg" alt="http://harchiko.qiniudn.com/20151220232425_nWH23.jpeg"></p><p>再举个例子，如果你想对字符串不管大小写进行排序, 就可以这样写！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(strings, String::compareToIgnoreCase)</span><br></pre></td></tr></table></figure><p>如上所见 <code>::</code>操作符将方法名与实例或者类分隔开。总体来说，又如下的规则:</p><ul><li>object::instanceMethod</li><li>Class::staticMethod</li><li>Class::instanceMethod</li></ul><p>值得指出的是， <code>this</code>和 <code>super</code> 关键字可以在其中使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello, world!"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcurrentGreeter</span> <span class="keyword">extends</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(<span class="keyword">super</span>::greet);</span><br><span class="line">    t.start();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造方法引用 -Constructor-References"><a href="# 构造方法引用 -Constructor-References" class="headerlink" title="构造方法引用 Constructor References"></a>构造方法引用 Constructor References</h2><p>跟上一个差不多，毕竟 <strong> 构造方法 </strong> 也是方法啊！！不过方法名字为 new 。</p><p> 但是！这个构造方法引用有一个牛逼的地方！</p><p>你知道 Array 是不能使用范型的对吧！（什么，你不知道？看看这里 <a href="http://stackoverflow.com/questions/2927391/whats-the-reason-i-cant-create-generic-array-types-in-java" target="_blank" rel="noopener">http://stackoverflow.com/questions/2927391/whats-the-reason-i-cant-create-generic-array-types-in-java</a>), 你没有办法创建一个类型为 T 的 Array 。 new T[n] 将会被覆盖为 new Object[n]。</p><p>假设我们想要一个包含 buttons 的 Array。Stream interface 可以返回一个 Object array。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object[] buttons = stream.toArray();</span><br></pre></td></tr></table></figure><p>不不不，我们可不想要 Object。Stream 库使用 构造方法引用解决了这个问题:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Button[] buttons = stream.toArray(Button[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1flzgwugxczj31kw0ngk5w.jpg" alt="http://harchiko.qiniudn.com/Screen%20Shot%202016-11-16%20at%204.30.23%20AM.png"></p><h2 id="变量作用域"><a href="# 变量作用域" class="headerlink" title="变量作用域"></a>变量作用域 </h2><p> 注意到我们在题目中写着 闭包（closure), 实际上，闭包的定义是: 引用了自由变量的函数。</p><p>在之前，如果需要在匿名类的内部引用外部变量，需要将外部变量定义为 final ，现在有了 lambda 表达式，你不必再这么做了。但同样需要保证外部的自由变量不能在 lambda 表达式中被改变。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1flzgwwa5lvj31kw0ngk5w.jpg" alt="http://harchiko.qiniudn.com/56cabf5d7d6dc247.jpg!600x600.jpg"><br>这是什么意思呢？ 不需要定义为 final，也不能改？</p><p>其实理解起来很简单，Java 8 中，不需要定义为 final ，但你其实可以直接把他当作 final，不要试图修改它就行了。</p><p>即便你用内部类，现在也无需定义为 final 了。</p><p>参考 StackOverFlow 链接: <a href="http://stackoverflow.com/questions/4732544/why-are-only-final-variables-accessible-in-anonymous-class" target="_blank" rel="noopener">http://stackoverflow.com/questions/4732544/why-are-only-final-variables-accessible-in-anonymous-class</a></p><h2 id="Default-Methods"><a href="#Default-Methods" class="headerlink" title="Default Methods"></a>Default Methods</h2><p>由于历史原因，像是类似 Collection 这种接口，如果进行添加接口的话，那将会造成之前的代码出错。</p><p>Java 想了一个一劳永逸的方法解决这个问题， 使用 default 修饰符来提供默认的实现 </p><p> 比如 Collection 接口的源代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"remove"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当没有 override remove 这个方法是，调用的时候返回 UnsupportedOperationException 错误。</p><h2 id="Static-Methods-in-Interfaces"><a href="#Static-Methods-in-Interfaces" class="headerlink" title="Static Methods in Interfaces"></a>Static Methods in Interfaces</h2><p>Java 8 中，你可以在接口中添加静态方法了。 看起来好像并不符合接口的定义了。</p><p>一般用来生成一个简单实现该 interface 的实例。</p><p>参考链接：</p><ol><li><a href="https://jcp.org/en/jsr/detail?id=335" target="_blank" rel="noopener">JSR 335: Lambda Expressions for the JavaTM Programming Language</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jdk8newfeature/" target="_blank" rel="noopener">Java 8 新特性概述</a></li><li><a href="http://www.drdobbs.com/jvm/lambda-expressions-in-java-8/240166764?pgno=1" target="_blank" rel="noopener">Lambda Expressions in Java 8</a></li></ol><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1flzgx8edw8j31471kuhdt.jpg" alt="http://harchiko.qiniudn.com/44577950_p0.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据&lt;a href=&quot;https://jcp.org/en/jsr/detail?id=335&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JSR 335&lt;/a&gt;, Java 终于在 Java 8 中引入了 Lambda 表达式。也称之为闭包或者匿名函数。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://blog.zhaochunqi.com/categories/java/"/>
    
    
      <category term="java" scheme="http://blog.zhaochunqi.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>如何动态选择 Android 需要启动的 Activity</title>
    <link href="http://blog.zhaochunqi.com/2016/10/18/dynamic_start_activity_on_android/"/>
    <id>http://blog.zhaochunqi.com/2016/10/18/dynamic_start_activity_on_android/</id>
    <published>2016-10-18T09:27:00.000Z</published>
    <updated>2018-05-15T21:32:29.946Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Android 开发过程中经常遇到第一次启动时需要登录或者一段介绍什么的。但之后再次启动时则不在需要的情况，对于这种情况，如何设定启动的 Activity 呢?</p></blockquote><a id="more"></a><h2 id="场景"><a href="# 场景" class="headerlink" title="场景"></a>场景 </h2><p> 第一次登录需要跳转到登录界面，而后来登录过后则只需直接跳转到需要显示的界面即可。</p><h2 id="方法 1"><a href="# 方法 1" class="headerlink" title="方法 1"></a>方法 1</h2><p>设定一个无界面的跳转 Activity:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    Intent intent;</span><br><span class="line">    <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">       intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ClassA.class);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ClassB.class);</span><br><span class="line">    &#125;</span><br><span class="line">    startActivity(intent);</span><br><span class="line">    finish();</span><br><span class="line">    <span class="comment">// note we never called setContentView()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意: 没有 <code>setContentView()</code>。否则你会看到一个跳转界面。</strong></p><h2 id="方法 2"><a href="# 方法 2" class="headerlink" title="方法 2"></a>方法 2</h2><p>动态设置布局:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!userIsLoggedIn) &#123;</span><br><span class="line">    setContentView(R.layout.signup);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    setContentView(R.layout.homescreen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反正我不推荐用这个。</p><p>参考链接:</p><ul><li><a href="http://stackoverflow.com/questions/4856539/dynamic-start-activity-in-android" target="_blank" rel="noopener">http://stackoverflow.com/questions/4856539/dynamic-start-activity-in-android</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;Android 开发过程中经常遇到第一次启动时需要登录或者一段介绍什么的。但之后再次启动时则不在需要的情况，对于这种情况，如何设定启动的 Activity 呢?&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="android" scheme="http://blog.zhaochunqi.com/categories/android/"/>
    
    
      <category term="activity" scheme="http://blog.zhaochunqi.com/tags/activity/"/>
    
  </entry>
  
  <entry>
    <title>修复他人 Android 代码遗留 Bug 的小技巧</title>
    <link href="http://blog.zhaochunqi.com/2016/09/24/fix_bugs_with_legacy/"/>
    <id>http://blog.zhaochunqi.com/2016/09/24/fix_bugs_with_legacy/</id>
    <published>2016-09-24T01:21:00.000Z</published>
    <updated>2018-05-15T21:32:29.946Z</updated>
    
    <content type="html"><![CDATA[<p>由于工作需求，近日接触到了他人的遗留代码，并要据此遗留代码进行 Bug 修复，总结一下在修复过程中使用到的一些小技巧。</p><a id="more"></a><p>谁不喜欢萌妹子呢！<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1flzgq5x5kij30hp0p0jx4.jpg" alt="http://harchiko.qiniudn.com/59097609_p0.jpg"></p><h2 id="寻找 -BUG- 对应的 -Activity"><a href="# 寻找 -BUG- 对应的 -Activity" class="headerlink" title="寻找 BUG 对应的 Activity"></a>寻找 BUG 对应的 Activity</h2><p>我会要求测试安装 <a href="http://www.coolapk.com/apk/com.willme.topactivity" target="_blank" rel="noopener">当前 Activity</a> 这个应用，并在产生 Bug 的地方截图，效果大概是这样:</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1flzgr1e7ntj31401z4kjl.jpg" alt="http://harchiko.qiniudn.com/Screenshot_1474651833.png"></p><p>很容易就找到对应的 Activity 了对不对？</p><h2 id="代码跳转"><a href="# 代码跳转" class="headerlink" title="代码跳转"></a>代码跳转 </h2><h3 id="文件跳转"><a href="# 文件跳转" class="headerlink" title="文件跳转"></a> 文件跳转 </h3><p> 这里，我将 跳转到响应文件修改为 <code>CMD + P</code> ，原因嘛，为了跟 Sublime 使用起来一致。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1flzgr3q53dj31401z4kjl.jpg" alt="http://harchiko.qiniudn.com/Screen%20Shot%202016-09-24%20at%201.33.59%20AM.png"></p><h3 id="方法跳转"><a href="# 方法跳转" class="headerlink" title="方法跳转"></a>方法跳转 </h3><p> 我使用 <code>CMD+R</code>搜索文件中的方法，快速定位到如 <code>onCreate()</code>之类的方法。</p><h3 id="跳到上一次代码编辑的地方"><a href="# 跳到上一次代码编辑的地方" class="headerlink" title="跳到上一次代码编辑的地方"></a>跳到上一次代码编辑的地方 </h3><p> 我使用插件 ideaVim, 然后使用 <code>CMD+[</code>, <code>CMD+]</code> 跳来跳去。</p><h3 id="跳到近期编辑过的文件"><a href="# 跳到近期编辑过的文件" class="headerlink" title="跳到近期编辑过的文件"></a>跳到近期编辑过的文件 </h3><p> 不多说，快捷键 <code>CMD + E</code></p><h2 id="分析布局"><a href="# 分析布局" class="headerlink" title="分析布局"></a>分析布局 </h2><p> 在调试过程中，某些类似 ListView 这种没有办法直接从 XML 中看出 问题的地方，使用 LayoutInspector 一看就明白了。</p><p>这个按钮躲在一个小角落，见图:</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1flzgr85nplj31401z4kjl.jpg" alt="http://harchiko.qiniudn.com/Screen%20Shot%202016-09-24%20at%201.47.22%20AM.png"></p><h2 id="事半功倍的日志库"><a href="# 事半功倍的日志库" class="headerlink" title="事半功倍的日志库"></a>事半功倍的日志库 </h2><p><a href="https://github.com/orhanobut/logger" target="_blank" rel="noopener">Logger</a> 这个对于我这样的懒人用起来太合适了</p><p> 普通日志长这样:<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1flzgrcex7xj31100akad0.jpg" alt="http://harchiko.qiniudn.com/current-log.png"></p><p>它的日志这样:</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1flzgrhq0zvj30lq06s3zm.jpg" alt="http://harchiko.qiniudn.com/description.png"></p><h2 id="善用搜索"><a href="# 善用搜索" class="headerlink" title="善用搜索"></a>善用搜索 </h2><p> 使用 <code>CMD+SHIFT+F</code>能进行全局搜索，这对于查找某些使用字符串拼接的地方特别有效果。</p><p>暂时就这么多吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于工作需求，近日接触到了他人的遗留代码，并要据此遗留代码进行 Bug 修复，总结一下在修复过程中使用到的一些小技巧。&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://blog.zhaochunqi.com/categories/android/"/>
    
    
      <category term="android" scheme="http://blog.zhaochunqi.com/tags/android/"/>
    
      <category term="tips" scheme="http://blog.zhaochunqi.com/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>Hi, RxJava</title>
    <link href="http://blog.zhaochunqi.com/2016/09/14/hi_rxjava/"/>
    <id>http://blog.zhaochunqi.com/2016/09/14/hi_rxjava/</id>
    <published>2016-09-14T01:29:00.000Z</published>
    <updated>2018-05-15T21:32:29.946Z</updated>
    
    <content type="html"><![CDATA[<p>本文是一篇简单的 RxJava 的介绍。RxJava 介绍是 : Reactive Extensions for the JVM.</p><a id="more"></a><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1flzgpyldsyj30qo0f0aav.jpg" alt="http://harchiko.qiniudn.com/rxjava-series-cover.jpg"></p><h2 id="Reactive"><a href="#Reactive" class="headerlink" title="Reactive"></a>Reactive</h2><p>Rx 是 ReactiveX 的缩写。 Reactive 在字典中的解释是:</p><p>“readily responsive to a stimulus” 对刺激易于反应 </p><p>RxJava 是 Rx 的 Java 实现。</p><h2 id="观察者模式"><a href="# 观察者模式" class="headerlink" title="观察者模式"></a> 观察者模式 </h2><p> 观察者模式是 RxJava 消息通知使用的模式。</p><p>如果你知道『薛定谔的猫』，下面可能有助于你来理解。</p><p>薛定谔 -&gt; Observer</p><p>猫 -&gt; Observable</p><p>当猫的状态发生改变时，通知薛定谔。『具体观察者模式请参考相关书籍』</p><p><strong>在 Android 中， 相关操作在子线程完成后，在 主线程 更新 UI。</strong></p><h2 id="Reactive-Programming"><a href="#Reactive-Programming" class="headerlink" title="Reactive Programming"></a>Reactive Programming</h2><p>Reactive programming is programming with asynchronous data streams.</p><p>关键词: 异步 / 数据流 </p><h3 id="异步能解决什么问题？"><a href="# 异步能解决什么问题？" class="headerlink" title="异步能解决什么问题？"></a> 异步能解决什么问题？</h3><p>举个例子：</p><ul><li>使用 Rx 请求网络数据，不用阻塞主线程。</li><li>使用 Rx 读写数据库，不用阻塞主线程。</li></ul><h3 id="你可能会问，为什么不阻塞主线程？"><a href="# 你可能会问，为什么不阻塞主线程？" class="headerlink" title="你可能会问，为什么不阻塞主线程？"></a>你可能会问，为什么不阻塞主线程？</h3><p>因为，如果有界面，会造成界面卡顿，即便没界面，程序卡在那里也不好。</p><p>况且 Android 中， 网络相关操作在多少个版本之前就不能在主线程调用了，调用直接告诉你不能在主线程，你网络请求多快都不行！</p><p>RxJava 中，很简单，主线程执行相关 UI 操作，费事线程放到其他线程来做。</p><p><strong>你可以忘掉 AsyncTasks 了 </strong></p><h3 id="你可能还会问，我就想在主线程用 Rxjava，可以吗？"><a href="# 你可能还会问，我就想在主线程用 Rxjava，可以吗？" class="headerlink" title="你可能还会问，我就想在主线程用 Rxjava，可以吗？"></a> 你可能还会问，我就想在主线程用 Rxjava，可以吗？</h3><p>当然可以，没有异步操作的话就行，比如 你发射一个 array , 然后对这个 array 进行简单操作。</p><p>这种操作就相当于 for 循环了。</p><h3 id="数据流"><a href="# 数据流" class="headerlink" title="数据流"></a>数据流 </h3><p>Rx 涉及到一个 『流』 的概念。</p><p> 万物皆可为流，事物在某个维度上的运动就可以成为流。</p><p>譬如：</p><ul><li>高速公路上的车流。</li><li>人随着时间的推移渐渐由婴儿到成年。『长大真的好烦啊』</li></ul><p>在 Rx 中， 流以时间为维度。</p><p><strong>数据流 </strong> 就像一条河：它可以被观测，被过滤，被操作，或者为新的消费者与另外一条流合并为一条新的流。『这句话我摘抄的』</p><h3 id="联合起来"><a href="# 联合起来" class="headerlink" title="联合起来"></a>联合起来 </h3><ul><li> 网络请求 </li></ul><p> 异步 + 数据流 =&gt; 网络请求 (数据传回之后，执行后续动作『观察者模式』) -&gt; Json -&gt; Objects -&gt; 处理</p><ul><li> 多次点击事件 </li></ul><p> 异步 + 数据流 =&gt; 点击多次 (点击之后的动作也是观察者模式) -&gt; 获取间隔短的点击 -&gt; 合并点击事件 -&gt; 过滤出 多次点击事件</p><p> 见下图:</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1flzgpzdh5uj30qo0f0aav.jpg" alt="http://harchiko.qiniudn.com/32YBZv.png"></p><h2 id="怎么用"><a href="# 怎么用" class="headerlink" title="怎么用"></a>怎么用 </h2><p> 以下是我学习 RxJava 时所看的一些资料，按照我认为重要程度及学习路线简单划分了一下:</p><ol><li>看一下 RxJava 解决了 Android 开发中的什么痛点：<a href="http://www.andreamaglie.com/rxjava-android-where-to-start/" target="_blank" rel="noopener">http://www.andreamaglie.com/rxjava-android-where-to-start/</a></li><li>学习下基本的 操作 <a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754" target="_blank" rel="noopener">https://gist.github.com/staltz/868e7e9bc2a7b8c1f754</a></li><li> 重点看一下这个 <a href="http://yarikx.github.io/NotRxJava/" target="_blank" rel="noopener">http://yarikx.github.io/NotRxJava/</a></li><li>看 wiki <a href="https://github.com/ReactiveX/RxJava/wiki" target="_blank" rel="noopener">https://github.com/ReactiveX/RxJava/wiki</a></li></ol><p>借用『Yaroslav Heriatovych』的那句话，『Once you start using it in your project – you will use it everywhere.』</p><hr><p>可爱的萌妹子放到最后：</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1flzgq36g8lj30zk0p5qf5.jpg" alt="http://harchiko.qiniudn.com/58950333_p0.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是一篇简单的 RxJava 的介绍。RxJava 介绍是 : Reactive Extensions for the JVM.&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://blog.zhaochunqi.com/categories/android/"/>
    
    
      <category term="android" scheme="http://blog.zhaochunqi.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>我用的很爽的工作流</title>
    <link href="http://blog.zhaochunqi.com/2016/08/31/workflow_for_network/"/>
    <id>http://blog.zhaochunqi.com/2016/08/31/workflow_for_network/</id>
    <published>2016-08-31T12:34:00.000Z</published>
    <updated>2018-05-15T21:32:29.946Z</updated>
    
    <content type="html"><![CDATA[<p>分享一下个人用的很爽的一些工作流，包含 翻墙、下载、同步等。</p><a id="more"></a><p>图片镇楼:<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1flzgne5xjuj30nr0vxn99.jpg" alt="http://harchiko.qiniudn.com/54686763_p0.jpg"></p><h2 id="翻墙 -amp- 域名解析"><a href="# 翻墙 -amp- 域名解析" class="headerlink" title="翻墙 &amp; 域名解析"></a>翻墙 &amp; 域名解析 </h2><p> 搬瓦工 最低价格的 vps，足够用，还可以迁移服务器。</p><p>这里，我把搬瓦工的 ip 地址配置在我子域名的 A 记录上（需要自己域名，可使用 DNSPOD 解析），主要有几个好处:</p><ul><li>登录 vps 可以使用域名地址 如: <code>ssh root@linux.zhaochunqi.com</code></li><li>作为翻墙服务时，由于每个地区节点的网速有所不同，有时候需要迁移，迁移过后，只需要修改相应的 A 记录，其他地方可以不用动。</li></ul><h2 id="SSH- 无密码登录"><a href="#SSH- 无密码登录" class="headerlink" title="SSH 无密码登录"></a>SSH 无密码登录 </h2><p> 作为一个懒人，甚至我连 <code>ssh root@linux.zhaochunqi.com</code> 都觉得很累，很麻烦, 更不要说每次还要输入密码了。</p><p>分几步，有些步骤可能之前配置 <code>git</code>之类的你有做过，可跳过 </p><ol><li> 生成 ssh-key . 查看是否已经存在 <code>cat ~/.ssh/id_rsa.pub</code>, 不存在可以使用 <code>ssh-keygen -f ~/.ssh/id_rsa -t rsa -N &#39;&#39;</code>来生成。</li><li>安装 ssh-copy-id <code>brew install ssh-copy-id</code></li><li>使用 ssh-copy-id 命令 <code>ssh-copy-id -i ~/.ssh/id_rsa.pub [用你自己的地址替换，如 root@linux.zhaochunqi.com]</code>，输入密码，这样你的 vps 可信任的 key 中就有你了，下次登录 <code>ssh root@linux.zhaochunqi.com</code>，不用输密码了。</li><li>alias, 把 alias 命令添加到 <code>.bashr</code>或 <code>.zshrc</code> 中 alias vps=”ssh <a href="mailto:root@linux.zhaochunqi.com" target="_blank" rel="noopener">root@linux.zhaochunqi.com</a>“。</li></ol><p>我们来登录下 vps，terminal 中输入 <code>vps</code>即可:<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1flzgnfo1k8g30ms0jiaag.gif" alt="http://harchiko.qiniudn.com/vps-my-work-flow.gif"></p><h2 id="下载国外资源"><a href="# 下载国外资源" class="headerlink" title="下载国外资源"></a>下载国外资源 </h2><p> 国内有些资源即便翻着墙也很难下载，反观国外，基本分分钟就能下载好，如何利用下这个呢？</p><p>使用 <code>BitTorrent Sync</code> , 免费版就足够用，创建一个文件夹用来同步，如 <code>vps</code>, 本地也创建一个同步文件夹，因为 VPS 空间有限，注意把缓存已删除文件取消勾选。</p><p>举个例子：</p><p>你下载 <code>Android Studio</code>，翻墙下载速度很慢，</p><ol><li>打开 Terminal，</li><li>输入 vps，</li><li>进入你的 vps 同步文件夹，</li><li>wget 链接地址，2s 下完，</li><li>等待 BTsync 同步到你本机 </li></ol><p> 你可能会有疑问（并没有），意义在哪里呢？</p><ul><li>速度快 </li><li> 你同步可以断点续传啊！！</li><li>稳定 </li></ul><p> 顺便说一下下载 <code>youtube</code>视频：</p><p>VPS 上安装 <code>youtube-dl</code>, 使用 <code>youtube-dl 链接地址 </code> 就可以下载了，需要提醒的是，youtube-dl 支持的网站不知道多到哪里去了！ 自己去 <code>google</code> 一下吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享一下个人用的很爽的一些工作流，包含 翻墙、下载、同步等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.zhaochunqi.com/tags/linux/"/>
    
      <category term="tools" scheme="http://blog.zhaochunqi.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Android 如何根据浏览器 URL 启动应用</title>
    <link href="http://blog.zhaochunqi.com/2016/08/22/android_start_activity_from_browser/"/>
    <id>http://blog.zhaochunqi.com/2016/08/22/android_start_activity_from_browser/</id>
    <published>2016-08-22T11:09:00.000Z</published>
    <updated>2018-05-15T21:32:29.942Z</updated>
    
    <content type="html"><![CDATA[<p>因为正在完成的应用需要用到 <code>OAuth2</code> 来进行身份认证，需要跳转到浏览器，然后再跳转回来，接收浏览器返回的信息。这里面用到了 <code>Implicit Intent</code><br><a id="more"></a></p><p>艾米莉亚镇楼:</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1flzgom73goj30np0xcawn.jpg" alt="http://harchiko.qiniudn.com/58541110_p0.jpg"></p><h2 id="假设"><a href="# 假设" class="headerlink" title="假设"></a>假设 </h2><p> 假设我们要解析的网址是: <code>https://zhaochunqi.inoreader</code></p><p>很明显，打不开，这是我乱编的。</p><h2 id="定义"><a href="# 定义" class="headerlink" title="定义"></a>定义 </h2><p> 在 <code>AndroidManifest</code>中定义 <code>intentfilter</code></p><p>在需要回调 Activity 中定义 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:host</span>=<span class="string">"zhaochunqi.inoreader"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:scheme</span>=<span class="string">"https"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:pathPattern</span>=<span class="string">"/*"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 下面逐行解释:</p><p><code>&lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;</code></p><blockquote><p>通知 Android 此 Activity 可以处理 ACTION_VIEW 类型的 Intent.</p></blockquote><p><code>&lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;</code></p><blockquote><p>从浏览器中唤醒的应用必须包含此声明 </p></blockquote><p><code>&lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</code></p><blockquote><p> 所有的 implicit Intent 必须包含此声明，否则将无法被感知，也就无法接受到 implicit Intent.</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:host</span>=<span class="string">"zhaochunqi.inoreader"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:scheme</span>=<span class="string">"https"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:pathPattern</span>=<span class="string">"/*"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><code>scheme</code>这个必须有，定义 <code>uri</code><br><code>host</code> 定义 <code>uri</code> 的主机部分 <br><code>pathPattern</code> 匹配，这个可有可无，没有也毫无影响。</p><p>看看成果:</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1flzgosz8soj30np0xcawn.jpg" alt="http://harchiko.qiniudn.com/2016-08-22intent.png"></p><p>Looks Great!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为正在完成的应用需要用到&lt;code&gt;OAuth2&lt;/code&gt;来进行身份认证，需要跳转到浏览器，然后再跳转回来，接收浏览器返回的信息。这里面用到了 &lt;code&gt;Implicit Intent&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://blog.zhaochunqi.com/categories/android/"/>
    
    
      <category term="android" scheme="http://blog.zhaochunqi.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android 本地变量存储 (API Key 等)</title>
    <link href="http://blog.zhaochunqi.com/2016/08/22/android_local_properties/"/>
    <id>http://blog.zhaochunqi.com/2016/08/22/android_local_properties/</id>
    <published>2016-08-22T10:45:00.000Z</published>
    <updated>2018-05-15T21:32:29.942Z</updated>
    
    <content type="html"><![CDATA[<p>处于方便替换和隐藏信息的原因，需要讲一些诸如 API KEY 之类的本地变量单独存储。<br><a id="more"></a></p><h2 id="定义"><a href="# 定义" class="headerlink" title="定义"></a>定义 </h2><p> 在<code>gradle.properties</code>中定义所需要存储的变量 </p><p> 如: <code>ApiKey=&quot;xxxxxxxxxxxxxxxxxxx&quot;</code></p><h2 id="配置"><a href="# 配置" class="headerlink" title="配置"></a>配置 </h2><p> 在 build.gradle(app) 中将变量保存到 BuildConfig 中 添加（放到 buildTypes 之外）:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">buildTypes.<span class="keyword">each</span> &#123;</span><br><span class="line">    it.buildConfigField <span class="string">'String'</span>, <span class="string">'API_KEY'</span>, ApiKey</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="# 使用" class="headerlink" title="使用"></a>使用 </h2><p> 这样，就可以在源码中使用 <code>BuildConfig.API_KEY</code> 来调用此变量了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;处于方便替换和隐藏信息的原因，需要讲一些诸如 API KEY 之类的本地变量单独存储。&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://blog.zhaochunqi.com/categories/android/"/>
    
    
      <category term="android" scheme="http://blog.zhaochunqi.com/tags/android/"/>
    
  </entry>
  
</feed>
