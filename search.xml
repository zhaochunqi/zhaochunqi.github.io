<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[使用 lantern 畅游互联网]]></title>
      <url>http://blog.zhaochunqi.com/2016/05/30/install_lantern_on_raspberry_pi/</url>
      <content type="html"><![CDATA[<p>就在昨天，一直使用的 shadowsocks 的 VPS 到期了，临时试用 lantern 来应急，结果发现 lantern 竟然比我一直在用的 shadowsocks 速度还快。</p><a id="more"></a><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202016-05-30%20at%202.54.45%20AM.png" alt="http://harchiko.qiniudn.com/Screen%20Shot%202016-05-30%20at%202.54.45%20AM.png"></p><h2 id="lantern"><a href="#lantern" class="headerlink" title="lantern"></a>lantern</h2><blockquote><p>Lantern, a new software programme which allows internet users to circumvent government-imposed censorship, is seeing rapid growth in China as more people are using it to bypass the Great Firewall of China to access websites like Facebook, YouTube and Twitter.</p></blockquote><p>简言之，专为中国不能上网的宝宝设计！就是为我设计的！</p><h2 id="下载"><a href="# 下载" class="headerlink" title="下载"></a>下载 </h2><p> 下载地址: <a href="https://getlantern.org/" target="_blank" rel="external">https://getlantern.org/</a></p><p>除了 ios ， 各种客户端都有。</p><h2 id="For-Raspberry-Pi"><a href="#For-Raspberry-Pi" class="headerlink" title="For Raspberry Pi"></a>For Raspberry Pi</h2><p>如果只是简简单单的下载使用，也就没有这篇文章了。下面介绍下如何在 pi 上安装，并用 pi 作为翻墙代理。</p><p>直接使用网上别人打包好的树莓派版本的包: 下载地址: <a href="https://mega.nz/#!IZdE2Yxa!HU7PBAuRQdUomS5MIt0VvFgB2K3Upv-bdrd4o0UHY98" target="_blank" rel="external">https://mega.nz/#!IZdE2Yxa!HU7PBAuRQdUomS5MIt0VvFgB2K3Upv-bdrd4o0UHY98</a> 下载 lantern*.deb 放到你的树莓派中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i lantern_2.2.4-1_armhf.deb</span><br><span class="line">sudo systemctl start lantern</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> lantern</span><br></pre></td></tr></table></figure><p>设定完毕后运行 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -x https://127.0.0.1:8787 https://www.google.com/</span><br></pre></td></tr></table></figure><p> 查看是否正常设置 </p><h2 id="Chrome- 设定"><a href="#Chrome- 设定" class="headerlink" title="Chrome 设定"></a>Chrome 设定</h2><p>lantern 就是有一点不好，如果上的是国内网站的话，他跑的比谁都慢！</p><p> 设定下 </p><ol><li>chrome 安装 SwitchySharp</li><li> 设定代理地址，刚刚你树莓派的 ip，端口 8787</li><li>在 AutoProxy 那里设定 online rules: <a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" target="_blank" rel="external">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a></li><li>设定，当符合 online rules 时，使用代理。</li><li>保存，并切换到 Autoproxy</li></ol><p>好了，保存 </p><h2 id="题外"><a href="# 题外" class="headerlink" title="题外"></a> 题外 </h2><p>lantern 在本地运行在 8787 端口，这意味着你可以用它来代理你的 Dropbox ， 使用 Proxifier 来代理你的一切流量。</p><p> 好了，暂且就到这里，去睡觉了！</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在树莓派中安装 docker]]></title>
      <url>http://blog.zhaochunqi.com/2016/05/29/run_docker_on_raspberry_pi/</url>
      <content type="html"><![CDATA[<p> 一直以为树莓派中没有办法安装 docker , 今天在一位博主的博客中看到有在树莓派中使用。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 docker</span></span><br><span class="line">wget https://github.com/vimagick/rpi-bin/\</span><br><span class="line">raw/master/deb/docker_1.10.3-1_armhf.deb  </span><br><span class="line">dpkg -i docker_1.10.3-1_armhf.deb</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 安装 docker-compose</span></span><br><span class="line">wget https://github.com/vimagick/rpi-bin/\</span><br><span class="line">raw/master/deb/docker-compose_1.7.1-1_armhf.deb</span><br><span class="line">dpkg -i docker-compose_1.7.1-1_armhf.deb</span><br></pre></td></tr></table></figure><p> 参考连接: <a href="https://blog.easypi.info/deploying-shadowsocks-with-docker/" target="_blank" rel="external">https://blog.easypi.info/deploying-shadowsocks-with-docker/</a></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git 同时推送到两个不同的 remote]]></title>
      <url>http://blog.zhaochunqi.com/2016/05/08/git_push_to_two_remotes/</url>
      <content type="html"><![CDATA[<p>近期遇到需要将 git 推送到不同的 git 在线服务商的问题，所以查找了下资料.</p><a id="more"></a><p>在最新版本的 git 中，可以这么做:</p><h3 id="配置"><a href="# 配置" class="headerlink" title="配置"></a>配置 </h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-url --add --push origin git://original/repo.git</span><br><span class="line">git remote <span class="built_in">set</span>-url --add --push origin git://another/repo.git</span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="# 效果图" class="headerlink" title="效果图"></a> 效果图 </h3><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202016-05-08%20at%208.48.19%20PM.png" alt="http://harchiko.qiniudn.com/Screen%20Shot%202016-05-08%20at%208.48.19%20PM.png"></p><h3 id="参考链接"><a href="# 参考链接" class="headerlink" title="参考链接"></a> 参考链接</h3><p><a href="http://stackoverflow.com/questions/14290113/git-pushing-code-to-two-remotes" target="_blank" rel="external">http://stackoverflow.com/questions/14290113/git-pushing-code-to-two-remotes</a></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何在多设备中同步]]></title>
      <url>http://blog.zhaochunqi.com/2016/05/08/sync_between_mutiple_devices/</url>
      <content type="html"><![CDATA[<p>我有一个很奇怪的需求，在不同的 device 中同步 PDF 的阅读标注。第一时间，我就想到了神器 Bittorrent Sync。</p><a id="more"></a><p><img src="http://harchiko.qiniudn.com/BTSync.png" alt="http://harchiko.qiniudn.com/BTSync.png"></p><p>btsync 是 bittorrent 旗下的一款同步软件，其特点是不需要有一个中央同步服务器即可进行同步。你可以想象成网盘，也可以想象成它是分布式存储。</p><h3 id="安装"><a href="# 安装" class="headerlink" title="安装"></a>安装 </h3><p>Android、iOS、Windows、OSX 下安装基本都是点点鼠标就可以了。</p><p> 说一下树莓派上安装 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.btsync &amp;&amp; <span class="built_in">cd</span> ~/.btsync</span><br><span class="line">wget https://download-cdn.getsync.com/stable/linux-arm/BitTorrent-Sync_arm.tar.gz</span><br><span class="line">btsync</span><br></pre></td></tr></table></figure><p> 命令行输出如下:</p><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202016-05-08%20at%2011.00.22%20AM.png" alt="http://harchiko.qiniudn.com/Screen%20Shot%202016-05-08%20at%2011.00.22%20AM.png"></p><p>通过 VNC 连进去，进入 127.0.0.1:8888 按照说明进行配置。</p><p>添加需要同步的文件夹，然后在其他客户端上进行配置（扫码或者直接打开链接), 主意，如果你像我一样需要在各个设备上同步进度，请选择 Read &amp; Write 权限。</p><h3 id="配上全家福的图"><a href="# 配上全家福的图" class="headerlink" title="配上全家福的图:"></a>配上全家福的图:</h3><p>OSX：</p><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202016-05-08%20at%2011.06.45%20AM.png" alt="http://harchiko.qiniudn.com/Screen%20Shot%202016-05-08%20at%2011.06.45%20AM.png"></p><p>S7 edge:</p><p><img src="http://harchiko.qiniudn.com/252222861.jpg" alt="http://harchiko.qiniudn.com/252222861.jpg"></p><p>Raspberry Pi:</p><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202016-05-08%20at%2011.11.20%20AM.png" alt="http://harchiko.qiniudn.com/Screen%20Shot%202016-05-08%20at%2011.11.20%20AM.png"></p><p>NOOK HD +:</p><p><img src="http://harchiko.qiniudn.com/Screenshot_2016-05-08-11-12-58.png" alt="http://harchiko.qiniudn.com/Screenshot_2016-05-08-11-12-58.png"></p><h3 id="结论"><a href="# 结论" class="headerlink" title="结论"></a>结论 </h3><p> 经局域网测试，修改之后 PDF 的标注会很快同步到其他设备中。能满足我的要求。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[15 分钟开发一个 Chrome App 【二】]]></title>
      <url>http://blog.zhaochunqi.com/2016/04/24/create-chrome-web-app-in-15-minutes-2/</url>
      <content type="html"><![CDATA[<p>本文将之前的简单 APP 优化了一小步.</p><a id="more"></a><p><img src="http://harchiko.qiniudn.com/wechat128.png" alt="http://harchiko.qiniudn.com/wechat128.png"></p><blockquote><p>因为 Mac 下微信实在是难用，还不如直接使用网页版的，找了一圈 Chrome App Store，竟然找不到一个简单的跳转微信的 APP，心想着也不会太难，就自己动起了手。</p></blockquote><h3 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h3><p>你可以在这里直接下载 <a href="https://github.com/zhaochunqi/wechat_chrome_app/releases/tag/v0.2" target="_blank" rel="external">https://github.com/zhaochunqi/wechat_chrome_app/releases/tag/v0.2</a></p><h3 id="优化"><a href="# 优化" class="headerlink" title="优化"></a>优化 </h3><p> 之前的版本实在是太简单了，虽然能满足自己的要求，但还是希望有一点改变。</p><ol><li>能够弹出新窗口。</li><li>能够使用一个合适微信大小的窗口，并且不能随意的 resize。</li></ol><h3 id="修改"><a href="# 修改" class="headerlink" title="修改"></a>修改 </h3><ol><li> 弹出新窗口，添加 container:panel</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"WeChat"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"WeChat Bookmark"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.2"</span>,</span><br><span class="line">  <span class="attr">"manifest_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"app"</span>: &#123;</span><br><span class="line">    <span class="attr">"urls"</span>: [</span><br><span class="line">      <span class="string">"http://blog.zhaochunqi.com"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"launch"</span>: &#123;</span><br><span class="line">      <span class="attr">"web_url"</span>: <span class="string">"http://web.wechat.com"</span>,</span><br><span class="line">      <span class="attr">"container"</span>: <span class="string">"panel"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"icons"</span>: &#123;</span><br><span class="line">    <span class="attr">"128"</span>: <span class="string">"wechat128.png"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>更改窗口大小，如何确定怎么更改窗口大小更合适呢？</li></ol><p>简单，更改下窗口大小，chrome 中审查下元素:</p><p><img src="http://harchiko.qiniudn.com/%E6%88%AA%E5%9B%BE%202016-04-24%2021%E6%97%B651%E5%88%8611%E7%A7%92.jpg" alt="http://harchiko.qiniudn.com/%E6%88%AA%E5%9B%BE%202016-04-24%2021%E6%97%B651%E5%88%8611%E7%A7%92.jpg"></p><p>确定大小后:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"WeChat"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"WeChat Bookmark"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.2"</span>,</span><br><span class="line">  <span class="attr">"manifest_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"app"</span>: &#123;</span><br><span class="line">    <span class="attr">"urls"</span>: [</span><br><span class="line">      <span class="string">"http://blog.zhaochunqi.com"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"launch"</span>: &#123;</span><br><span class="line">      <span class="attr">"web_url"</span>: <span class="string">"http://web.wechat.com"</span>,</span><br><span class="line">      <span class="attr">"container"</span>: <span class="string">"panel"</span>,</span><br><span class="line">      <span class="attr">"height"</span>: <span class="number">700</span>,</span><br><span class="line">      <span class="attr">"width"</span>: <span class="number">860</span>,</span><br><span class="line">      <span class="attr">"minHeight"</span>: <span class="number">700</span>,</span><br><span class="line">      <span class="attr">"minWidth"</span>: <span class="number">860</span>,</span><br><span class="line">      <span class="attr">"maxHeight"</span>: <span class="number">700</span>,</span><br><span class="line">      <span class="attr">"maxWidth"</span>: <span class="number">860</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"icons"</span>: &#123;</span><br><span class="line">    <span class="attr">"128"</span>: <span class="string">"wechat128.png"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考连接：<a href="http://stackoverflow.com/questions/22479716/fixed-window-size-for-chrome-web-app" target="_blank" rel="external">http://stackoverflow.com/questions/22479716/fixed-window-size-for-chrome-web-app</a></p></blockquote><p>来看下效果:</p><p><img src="http://harchiko.qiniudn.com/sfdasdfasdfasdfasdfasdf.jpg" alt="http://harchiko.qiniudn.com/sfdasdfasdfasdfasdfasdf.jpg"></p><p>只能说： 完美 ~</p><p>美中不足的是好像那个地址栏有点多余, 然而查阅资料，为了安全考虑正常方法已经无法隐藏地址栏了，链接: <a href="http://stackoverflow.com/questions/15230137/hide-bar-address-in-popup-chrome" target="_blank" rel="external">http://stackoverflow.com/questions/15230137/hide-bar-address-in-popup-chrome</a></p><h3 id="打个包"><a href="# 打个包" class="headerlink" title="打个包"></a>打个包 </h3><p> 打包其实很简单，打开插件页，点击打包即可 </p><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202016-04-24%20at%2010.01.36%20PM.png" alt="http://harchiko.qiniudn.com/Screen%20Shot%202016-04-24%20at%2010.01.36%20PM.png"></p><p> 第一次的话 private key 是不需要填写的，它会帮你生成一个，注意保存，如果不需要上传到 Chrome App Store 我估计也没啥问题。</p><p>源码在这里: <a href="https://github.com/zhaochunqi/wechat_chrome_app" target="_blank" rel="external">https://github.com/zhaochunqi/wechat_chrome_app</a></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[15 分钟开发一个 Chrome App【一】]]></title>
      <url>http://blog.zhaochunqi.com/2016/04/24/create-chrome-web-app-in-15-minutes/</url>
      <content type="html"><![CDATA[<blockquote><p>本文介绍了如何在很短的时间内开发一个 Chrome APP.</p></blockquote><a id="more"></a><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202016-04-24%20at%2012.53.40%20PM.png" alt="http://harchiko.qiniudn.com/Screen%20Shot%202016-04-24%20at%2012.53.40%20PM.png"></p><h2 id="准备图标"><a href="# 准备图标" class="headerlink" title="准备图标"></a>准备图标 </h2><p> 网上搜索一个图标，这里使用微信的图标 </p><p><img src="http://harchiko.qiniudn.com/wechat128.png" alt="http://harchiko.qiniudn.com/wechat128.png"></p><h2 id="创建 manifest-json- 文件"><a href="# 创建 manifest-json- 文件" class="headerlink" title="创建 manifest.json 文件"></a> 创建 manifest.json 文件 </h2><p> 创建一个文件夹，在文件夹中添加 <code>manifiest.json</code>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"name"</span>: <span class="string">"WeChat"</span>,</span><br><span class="line">	<span class="attr">"description"</span>: <span class="string">"Just A Wechat Web App"</span>,</span><br><span class="line">	<span class="attr">"version"</span>: <span class="string">"0.1"</span>,</span><br><span class="line">	<span class="attr">"manifest_version"</span>: <span class="number">2</span>,</span><br><span class="line">	<span class="attr">"app"</span>: &#123;</span><br><span class="line">		<span class="attr">"urls"</span>: [<span class="string">"http://blog.zhaochunqi.com"</span>],</span><br><span class="line">		<span class="attr">"launch"</span>: &#123;</span><br><span class="line">			<span class="attr">"web_url"</span>: <span class="string">"http://web.wechat.com"</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">"icons"</span>: &#123;</span><br><span class="line">		<span class="attr">"128"</span>: <span class="string">"wechat128.png"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong> manifest_version 需要是 2。</p></blockquote><h3 id="测试"><a href="# 测试" class="headerlink" title="测试"></a>测试 </h3><p> 打开 Chrome 的扩展界面，勾选 <code>Developer Mode</code>, 点击 <code>Load unpacked extention</code>, 找到文件夹：</p><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202016-04-24%20at%201.03.21%20PM.png" alt="http://harchiko.qiniudn.com/Screen%20Shot%202016-04-24%20at%201.03.21%20PM.png"></p><p>打开 Chrome App Launcher，你的应用已在其中:</p><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202016-04-24%20at%201.03.57%20PM.png" alt="http://harchiko.qiniudn.com/Screen%20Shot%202016-04-24%20at%201.03.57%20PM.png"></p><p>点击后跳转到 微信界面。</p><p>Easy, hah?</p><p>源码在这里: <a href="https://github.com/zhaochunqi/wechat_chrome_app" target="_blank" rel="external">https://github.com/zhaochunqi/wechat_chrome_app</a></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从零开始将树莓派打造成家用下载机【二】 BT 下载篇]]></title>
      <url>http://blog.zhaochunqi.com/2016/04/22/raspberry-pi-as-nas-server2/</url>
      <content type="html"><![CDATA[<p>本篇介绍一下如何使用树莓派进行下载。<br><a id="more"></a></p><p><img src="http://harchiko.qiniudn.com/Pi_3_Model_B.png" alt="http://harchiko.qiniudn.com/Pi_3_Model_B.png"></p><h2 id="准备工作 - 换源"><a href="# 准备工作 - 换源" class="headerlink" title="准备工作 换源"></a>准备工作 换源 </h2><p> 出于速度考虑，将系统默认的源修改为 中科大源 </p><ol><li> 备份 <code>cp /etc/apt/sources.list /etc/apt/sources.list.bak</code></li><li><p>修改文本 <code>/etc/apt/sources.list</code> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ jessie main contrib non-free rpi</span><br></pre></td></tr></table></figure></li><li><p>更新 <code>sudo apt-get update</code></p></li></ol><h2 id="树莓派上安装 -Deluge- 客户端"><a href="# 树莓派上安装 -Deluge- 客户端" class="headerlink" title="树莓派上安装 Deluge 客户端"></a>树莓派上安装 Deluge 客户端 </h2><p> 命令行输入如下命令安装 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install deluged</span><br><span class="line"></span><br><span class="line">sudo apt-get install deluge-console</span><br></pre></td></tr></table></figure><p> 启动 deluge, 并杀掉进程（创建配置文件)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deluged</span><br><span class="line"></span><br><span class="line">sudo pkill deluged</span><br></pre></td></tr></table></figure><p>备份配置文件 <br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.config/deluge/auth ~/.config/deluge/auth.old</span><br><span class="line"></span><br><span class="line">vi ~/.config/deluge/auth</span><br></pre></td></tr></table></figure><p></p><p> 按如下格式添加配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user:password:level</span><br></pre></td></tr></table></figure><p>上面的用户名、密码、level 级别（具体这个选项我也不知道什么等级对应什么功能,10 全功能），方便起见使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi:rapberry:10</span><br></pre></td></tr></table></figure><p>保存之后重新启动 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deluged</span><br><span class="line"></span><br><span class="line">deluge-console</span><br></pre></td></tr></table></figure><p> 进入交互式界面 </p><p><img src="http://harchiko.qiniudn.com/376x233x2013-03-24_163942.jpg.pagespeed.gp+jp+jw+pj+js+rj+rp+rw+ri+cp+md.ic.68wn4b8TgH.jpg" alt="http://harchiko.qiniudn.com/376x233x2013-03-24_163942.jpg.pagespeed.gp+jp+jw+pj+js+rj+rp+rw+ri+cp+md.ic.68wn4b8TgH.jpg"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">config <span class="_">-s</span> allow_remote True</span><br><span class="line"></span><br><span class="line">config allow_remote</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p> 以上命令开启了远程链接 </p><p> 现在，重启 deluge 使配置生效 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pkill deluged</span><br><span class="line"></span><br><span class="line">deluged</span><br></pre></td></tr></table></figure><p> 到这里，实际上树莓派上的工作已经做完了，现在进行电脑上的操作 </p><h2 id="电脑安装 -Deluge- 客户端"><a href="# 电脑安装 -Deluge- 客户端" class="headerlink" title="电脑安装 Deluge 客户端"></a> 电脑安装 Deluge 客户端 </h2><ol><li><p> 下载 Deluge: <a href="http://dev.deluge-torrent.org/wiki/Download" target="_blank" rel="external">http://dev.deluge-torrent.org/wiki/Download</a></p></li><li><p>安装好之后，打开 Preferences-&gt;Interface，取消勾选 Classic Mode 下的 Enable。</p><p><img src="http://harchiko.qiniudn.com/537x271x2013-03-24_173041.jpg.pagespeed.gp+jp+jw+pj+js+rj+rp+rw+ri+cp+md.ic.HQH6hFYrAP.jpg" alt="http://harchiko.qiniudn.com/537x271x2013-03-24_173041.jpg.pagespeed.gp+jp+jw+pj+js+rj+rp+rw+ri+cp+md.ic.HQH6hFYrAP.jpg"></p></li><li><p>重启之后添加 Host（还记得第一天绑定的域名嘛, 也可以填写 ip),port,Username,Password.</p><p>如下图:</p><p><img src="http://harchiko.qiniudn.com/358x183x2013-03-24_164526.jpg.pagespeed.gp+jp+jw+pj+js+rj+rp+rw+ri+cp+md.ic.B59WSsSlJk.jpg" alt="http://harchiko.qiniudn.com/358x183x2013-03-24_164526.jpg.pagespeed.gp+jp+jw+pj+js+rj+rp+rw+ri+cp+md.ic.B59WSsSlJk.jpg"></p><p><img src="http://harchiko.qiniudn.com/401x359x2013-03-24_173602.jpg.pagespeed.gp+jp+jw+pj+js+rj+rp+rw+ri+cp+md.ic.K7h7np4726.jpg" alt="http://harchiko.qiniudn.com/401x359x2013-03-24_173602.jpg.pagespeed.gp+jp+jw+pj+js+rj+rp+rw+ri+cp+md.ic.K7h7np4726.jpg"></p><p>点击连接进入主界面:<br><img src="http://harchiko.qiniudn.com/650x235x2013-03-24_173917.jpg.pagespeed.gp+jp+jw+pj+js+rj+rp+rw+ri+cp+md.ic.VMsLC5uovk.jpg" alt="http://harchiko.qiniudn.com/650x235x2013-03-24_173917.jpg.pagespeed.gp+jp+jw+pj+js+rj+rp+rw+ri+cp+md.ic.VMsLC5uovk.jpg"></p></li></ol><h3 id="配置"><a href="# 配置" class="headerlink" title="配置"></a>配置 </h3><h4 id="下载配置："><a href="# 下载配置：" class="headerlink" title="下载配置："></a> 下载配置：</h4><p>在 Downloads 目录下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /home/pi/Downloads/downloading</span><br><span class="line">sudo mkdir /home/pi/Downloads/completed</span><br><span class="line">sudo mkdir /home/pi/Downloads/torrents/watch</span><br><span class="line">sudo mkdir /home/pi/Downloads/torrents/torrent-backup</span><br></pre></td></tr></table></figure><p>按照图中修改即可 </p><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202016-04-23%20at%201.06.13%20AM.png" alt="http://harchiko.qiniudn.com/Screen%20Shot%202016-04-23%20at%201.06.13%20AM.png"></p><h4 id="网络配置"><a href="# 网络配置" class="headerlink" title="网络配置"></a> 网络配置 </h4><p> 按图示修改即可。</p><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202016-04-23%20at%2012.05.33%20AM.png" alt="http://harchiko.qiniudn.com/Screen%20Shot%202016-04-23%20at%2012.05.33%20AM.png"></p><p>这下，你可以远程添加种子到树莓派下载了 </p><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202016-0aa4-23%20at%2012.08.42%20AM.jpg" alt="http://harchiko.qiniudn.com/Screen%20Shot%202016-0aa4-23%20at%2012.08.42%20AM.jpg"></p><h2 id="One-More-thing"><a href="#One-More-thing" class="headerlink" title="One More thing"></a>One More thing</h2><p> 设置定时任务，免得影响正常上网:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab <span class="_">-e</span></span><br></pre></td></tr></table></figure><p>在后面添加内容 <br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 周一到周五</span><br><span class="line">0 1 * * 1,2,3,4,5 deluged</span><br><span class="line">0 18 * * 1,2,3,4,5 pkill deluged </span><br><span class="line"></span><br><span class="line"># 周六周日</span><br><span class="line">0 2 * * 0,6 deluged </span><br><span class="line">0 8 * * 0,6 sudo pkill deluged</span><br></pre></td></tr></table></figure><p></p><p> 周一到周五，每天凌晨 1 点开启，晚上 6 点结束；<br>周六周日，凌晨两点开启，早上 8 点结束；</p><p>至此，下载已经告一段落。</p><p>参考链接: 1. <a href="http://www.howtogeek.com/142044/how-to-turn-a-raspberry-pi-into-an-always-on-bittorrent-box/" target="_blank" rel="external">http://www.howtogeek.com/142044/how-to-turn-a-raspberry-pi-into-an-always-on-bittorrent-box/</a></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从零开始将树莓派打造成家用下载机【一】 网络配置篇]]></title>
      <url>http://blog.zhaochunqi.com/2016/04/17/raspberry-pi-as-nas-server/</url>
      <content type="html"><![CDATA[<p>本篇讲介绍一下树莓派基本的网络配置，使其能够在公网正常访问。<br><a id="more"></a></p><p><img src="http://harchiko.qiniudn.com/Pi_3_Model_B.png" alt="http://harchiko.qiniudn.com/Pi_3_Model_B.png"></p><h3 id="烧录 micro-sd 卡"><a href="# 烧录 micro-sd 卡" class="headerlink" title="烧录 micro sd 卡"></a>烧录 micro sd 卡 </h3><p> 具体操作可查看官方 <a href="https://www.raspberrypi.org/documentation/installation/installing-images/README.md" target="_blank" rel="external">https://www.raspberrypi.org/documentation/installation/installing-images/README.md</a>，比较简单，不详述。</p><h3 id="配置 IP 地址"><a href="# 配置 IP 地址" class="headerlink" title="配置 IP 地址"></a> 配置 IP 地址 </h3><p> 烧录好之后插上 SD 卡，接好网线启动树莓派，看到树莓派灯正常亮系统应该就算启动完成了。</p><ol><li>进入路由器后台, 打开 DHCP 服务，查看树莓派的 ip 地址，将其修改为固定 ip 地址后重启路由器 (我的为 192.168.0.169)。</li><li> 使用 <code>ssh pi@192.168.0.169</code>登录树莓派（Mac/Linux 下直接使用 Terminal, Windows 下可使用 Xshell）</li></ol><h3 id="配置公网访问"><a href="# 配置公网访问" class="headerlink" title="配置公网访问"></a>配置公网访问 </h3><h3 id="路由器"><a href="# 路由器" class="headerlink" title="路由器"></a> 路由器 </h3><ul><li>DMZ 主机配置<br> 在路由器中，配置中找到 DMZ 主机选项，将其设置为树莓派的 ip。</li></ul><h3 id="SSH 配置"><a href="#SSH 配置" class="headerlink" title="SSH 配置"></a>SSH 配置 </h3><h4 id="密码修改"><a href="# 密码修改" class="headerlink" title="密码修改"></a> 密码修改 </h4><pre><code> 使用命令 `passwd pi` 修改 pi 的密码。建议密码修改强度足够强，因为这台主机会暴露在公网。
</code></pre><h4 id="SSH 端口修改"><a href="#SSH 端口修改" class="headerlink" title="SSH 端口修改"></a>SSH 端口修改 </h4><pre><code> 出于同样的安全考虑，修改 ssh 端口
</code></pre><ul><li>修改配置文件 <code>vi /etc/ssh/sshd_config</code> 将 ssh 端口修改为 xxxx(你希望的端口), 这里我设定的是 1213。</li><li>重启 SSH 服务，<code>sudo service ssh restart</code></li></ul><h4 id="查看本地 IP 是否能从公网访问"><a href="# 查看本地 IP 是否能从公网访问" class="headerlink" title="查看本地 IP 是否能从公网访问"></a>查看本地 IP 是否能从公网访问 </h4><blockquote><p> 在国内，因为 ipv4 地址不够用或者一些其他原因，你所使用的 ip 可能是电信分配的局域网的 ip，这时候你就需要找电信客服说一下你需要公网 ip 让他们帮你改回来。</p></blockquote><p>这里通过 telnet 服务看一下是否当前分配的是公网 ip</p><ol><li><strong>查看本机的公网 ip</strong><br>使用命令 <code>curl ifconfig.me</code>, 或者直接在百度中搜索 ip。</li><li><strong>本地查看 SSH 服务端口号是否更改过来 </strong><code>telnet 192.168.0.169 1213</code><br>(<code>#xxxx</code> 指的是端口号)</li><li><strong>通过公网查看 </strong> 通过第一步查看到的 ip 来从公网访问<code>telnet xxx.xxx.xxx 1213</code><br>(这里使用公网 ip）如果能够正常运行的话则证明此树莓派已经运行在公网。</li></ol><p> 这样 ssh 登录命令变为 <code>ssh pi@xxx.xxx.xxx -p 1213</code> （指定端口）</p><h4 id="将本地 ip 与域名绑定"><a href="# 将本地 ip 与域名绑定" class="headerlink" title="将本地 ip 与域名绑定"></a>将本地 ip 与域名绑定 </h4><p> 因为家庭宽带的 ip 是不固定的，如果使用 ip 进行连接的话每次都要先获取到机器的当前 ip 才能进行 ssh 登录，这里我们将 ip 地址绑定到二级域名上。</p><p>按照此 repo: <a href="https://github.com/zhaochunqi/change_my_ip_on_dnspod" target="_blank" rel="external">https://github.com/zhaochunqi/change_my_ip_on_dnspod</a> 中 README 进行相应配置。</p><ol><li>clone 这个 repo， 在 Dnspod 中获取到 APIKEY，以及响应的二级域名需要的参数。</li><li>修改库中的 change_my_ip_on_dnspod.sh <code>Shell</code>脚本。</li><li>使用命令 <code>chmod +x change_my_ip_on_dnspod.sh</code> 添加脚本的可执行权限。</li><li>运行 ./change_my_ip_on_dnspod.sh 查看返回值, 得到如下图的结果即为成功。<img src="http://harchiko.qiniudn.com/Screen%20Shot%202016-04-18%20at%2012.13.26%20AM.png" alt="http://harchiko.qiniudn.com/Screen%20Shot%202016-04-18%20at%2012.13.26%20AM.png"></li><li>登录树莓派系统 <code>crontab -e</code>在末尾添加 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># every 20 mins</span></span><br><span class="line">*/20 * * * * ./path/to/change_ip_4_pi.sh</span><br></pre></td></tr></table></figure></li></ol><p><code>path/to/change_ip_4_pi.sh</code> 替换为你的真实地址。</p><p> 至此，你能从你刚刚绑定的二级域名直接访问到你的树莓派:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh pi@haha.mydomain.com -p 1213</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gist-Vim 介绍]]></title>
      <url>http://blog.zhaochunqi.com/2016/04/12/vim-plugin-gist-vim/</url>
      <content type="html"><![CDATA[<h2 id="Gist-Vim- 介绍"><a href="#Gist-Vim- 介绍" class="headerlink" title="Gist-Vim 介绍"></a>Gist-Vim 介绍 </h2><blockquote><p>Gist-Vim 是一款能够访问、保存 gist 的 Vim 插件。</p></blockquote><a id="more"></a><h3 id="说一下重点："><a href="# 说一下重点：" class="headerlink" title="说一下重点："></a> 说一下重点：</h3><ul><li>使用之前要先设置 <code>git config --global github.user Username</code> 注意是 github.user.</li><li>在 .vimrc 中设置 <code>let g:gist_clip_command = &#39;pbcopy&#39;</code>以便可以直接粘贴上传的 Gist 地址。</li><li>使用 Vundle 安装时要安装两个包 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bundle &apos;mattn/webapi-vim&apos;</span><br><span class="line">Bundle &apos;mattn/gist-vim&apos;</span><br></pre></td></tr></table></figure><h3 id="常用的几个命令"><a href="# 常用的几个命令" class="headerlink" title="常用的几个命令"></a> 常用的几个命令 </h3><ul><li><code>:Gist -l zhaochunqi</code> zhaochunqi 的全部 gist</li><li><code>:Gist -a</code> 匿名 gist</li><li> 可以进入 V 模式选择后提交 Gist，可以使用 -s 选项添加描述说明。</li></ul><hr><h3 id="Gist-vim"><a href="#Gist-vim" class="headerlink" title="Gist.vim"></a>Gist.vim</h3><p>This is a vimscript for creating gists (<a href="http://gist.github.com" target="_blank" rel="external">http://gist.github.com</a>).</p><p>For the latest version please see <a href="https://github.com/mattn/gist-vim" target="_blank" rel="external">https://github.com/mattn/gist-vim</a>.</p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage:"></a>Usage:</h2><ul><li><p>Post current buffer to gist, using default privacy option.</p><pre><code>:Gist
</code></pre></li><li><p>Post selected text to gist, using default privacy option.<br>This applies to all permutations listed below (except multi).</p><pre><code>:&apos;&lt;,&apos;&gt;Gist
</code></pre></li><li><p>Create a private gist.</p><pre><code>:Gist -p
</code></pre></li><li><p>Create a public gist.<br>(Only relevant if you’ve set gists to be private by default.)</p><pre><code>:Gist -P
</code></pre></li></ul><blockquote><p>This is only relevant if you’ve set gists to be private by default;<br>if you get an empty gist list, try “:Gist –abandon”.</p></blockquote><ul><li><p>Create a gist anonymously.</p><pre><code>:Gist -a
</code></pre></li><li><p>Create a gist with all open buffers.</p><pre><code>:Gist -m
</code></pre></li><li><p>Edit the gist (you need to have opened the gist buffer first).<br>You can update the gist with the “:w” command within the gist buffer.</p><pre><code>:Gist -e
</code></pre></li><li><p>Edit the gist with name ‘foo.js’ (you need to have opened the gist buffer<br>first).</p><pre><code>:Gist -e foo.js
</code></pre></li><li><p>Post/Edit with the description “ (you need to have opened the gist buffer<br>first). &gt;</p><pre><code>:Gist -s something
:Gist -e -s something
</code></pre></li><li><p>Delete the gist (you need to have opened the gist buffer first).<br>Password authentication is needed.</p><pre><code>:Gist -d
</code></pre></li><li><p>Fork the gist (you need to have opened the gist buffer first).<br>Password authentication is needed.</p><pre><code>:Gist -f
</code></pre></li><li><p>Star the gist (you need to have opened the gist buffer first).<br>Password authentication is needed.</p><pre><code>:Gist +1
</code></pre></li><li><p>Unstar the gist (you need to have opened the gist buffer first).<br>Password authentication is needed.</p><pre><code>:Gist -1
</code></pre></li><li><p>Get gist XXXXX.</p><pre><code>:Gist XXXXX
</code></pre></li><li><p>Get gist XXXXX and add to clipboard.</p><pre><code>:Gist -c XXXXX
</code></pre></li><li><p>List your public gists.</p><pre><code>:Gist -l
</code></pre></li><li><p>List gists from user “mattn”.</p><pre><code>:Gist -l mattn
</code></pre></li><li><p>List everyone’s gists.</p><pre><code>:Gist -la
</code></pre></li><li><p>List gists from your starred gists.</p><pre><code>:Gist -ls
</code></pre></li><li><p>Open the gist on browser after you post or update it.</p><pre><code>:Gist -b
</code></pre></li></ul><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h2><p>If you set g:gist_clip_command, gist.vim will copy the gist code with option<br>‘-c’.</p><ul><li><p>Mac:</p><pre><code>let g:gist_clip_command = &apos;pbcopy&apos;
</code></pre></li><li><p>Linux:</p><pre><code>let g:gist_clip_command = &apos;xclip -selection clipboard&apos;
</code></pre></li><li><p>Others (cygwin?):</p><pre><code>let g:gist_clip_command = &apos;putclip&apos;
</code></pre></li></ul><p>If you want to detect filetype from the filename:</p><pre><code>let g:gist_detect_filetype = 1
</code></pre><p>If you want to open browser after the post:</p><pre><code>let g:gist_open_browser_after_post = 1
</code></pre><p>If you want to change the browser:</p><pre><code>let g:gist_browser_command = &apos;w3m %URL%&apos;
</code></pre><p>or:</p><pre><code>let g:gist_browser_command = &apos;opera %URL% &amp;&apos;
</code></pre><p>On windows, this should work with your user settings.</p><p>If you want to show your private gists with “:Gist -l”:</p><pre><code>let g:gist_show_privates = 1
</code></pre><p>If you want your gist to be private by default:</p><pre><code>let g:gist_post_private = 1
</code></pre><p>If you want your gist to be anonymous by default:</p><pre><code>let g:gist_post_anonymous = 1
</code></pre><p>If you want to manipulate multiple files in a gist:</p><pre><code>let g:gist_get_multiplefile = 1
</code></pre><p>If you want to use on GitHub Enterprise:</p><pre><code>let g:gist_api_url = &apos;http://your-github-enterprise-domain/api/v3&apos;
</code></pre><p>You need to either set global git config:</p><pre><code>$ git config --global github.user Username
</code></pre><h2 id="License"><a href="#License" class="headerlink" title="License:"></a>License:</h2><pre><code>Copyright 2010 by Yasuhiro Matsumoto
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
``AS IS&apos;&apos; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.
</code></pre><h2 id="Install"><a href="#Install" class="headerlink" title="Install:"></a>Install:</h2><p>Copy it to your plugin directory.<br>gist.vim will create a curl cookie-jar file in your runtimepath.</p><ul><li>rtp:<ul><li>autoload/gist.vim</li><li>plugin/gist.vim</li></ul></li></ul><p>If you want to uninstall gist.vim, remember to also remove <code>~/.gist-vim</code>.</p><p>You need to install webapi-vim also:</p><p><a href="http://www.vim.org/scripts/script.php?script_id=4019" target="_blank" rel="external">http://www.vim.org/scripts/script.php?script_id=4019</a></p><p>If you want to use latest one:</p><p><a href="https://github.com/mattn/webapi-vim" target="_blank" rel="external">https://github.com/mattn/webapi-vim</a></p><h3 id="Install-with-Vundle"><a href="#Install-with-Vundle" class="headerlink" title="Install with Vundle"></a>Install with <a href="https://github.com/gmarik/vundle" target="_blank" rel="external">Vundle</a></h3><p>Add the following lines to your <code>.vimrc</code>.</p><pre><code>Bundle &apos;mattn/webapi-vim&apos;
Bundle &apos;mattn/gist-vim&apos;
</code></pre><p>Now restart Vim and run <code>:BundleInstall</code>.</p><h3 id="Install-with-NeoBundle"><a href="#Install-with-NeoBundle" class="headerlink" title="Install with NeoBundle"></a>Install with <a href="https://github.com/Shougo/neobundle.vim" target="_blank" rel="external">NeoBundle</a></h3><p>Add the following line to your <code>.vimrc</code>.</p><pre><code>NeoBundle &apos;mattn/gist-vim&apos;, {&apos;depends&apos;: &apos;mattn/webapi-vim&apos;}
</code></pre><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements:"></a>Requirements:</h2><ul><li>curl command (<a href="http://curl.haxx.se/" target="_blank" rel="external">http://curl.haxx.se/</a>)</li><li>webapi-vim (<a href="https://github.com/mattn/webapi-vim" target="_blank" rel="external">https://github.com/mattn/webapi-vim</a>)</li><li>and if you want to use your git profile, the git command-line client.</li></ul><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup:"></a>Setup:</h2><p>This plugin supports both basic and two-factor authentication using GitHub<br>API v3. The plugin stores its credentials in <code>~/.gist-vim</code>.</p><p>First, you need to set your GitHub username in git’s global configuration:</p><pre><code>$ git config --global github.user &lt;username&gt;
</code></pre><p>Then gist-vim will ask for your password in order to create an access<br>token. If you have two-factor authentication enabled, gist-vim will also<br>prompt you to enter the two-factor key you receive.</p><p>Whichever type of authentication you use, your GitHub password will not be<br>stored, only a OAuth access token produced specifically for gist-vim. The<br>token is stored in <code>~/.gist-vim</code>. If you stop using the plugin, you can<br>easily remove this file. To revoke the associated GitHub token, go to the<br>list of <a href="https://github.com/settings/applications" target="_blank" rel="external">“Authorized applications” on GitHub’s “Account Settings”<br>page</a>.</p><p><strong>Note:</strong> the username is optional if you only send anonymous gists.</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Content Provider 指南]]></title>
      <url>http://blog.zhaochunqi.com/2016/04/10/android_content_provider/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="# 介绍" class="headerlink" title="介绍"></a>介绍 </h2><p> 以下摘自开发文档 </p><blockquote><p>Content providers are one of the primary building blocks of Android applications, providing content to applications. They encapsulate data and provide it to applications through the single ContentResolver interface. A content provider is only required if you need to share data between multiple applications. For example, the contacts data is used by multiple applications and must be stored in a content provider. <strong>If you don’t need to share data amongst multiple applications you can use a database directly via SQLiteDatabase. </strong></p></blockquote><a id="more"></a><h2 id="使用场景"><a href="# 使用场景" class="headerlink" title="使用场景"></a> 使用场景 </h2><p> 假设现在你需要开发一个应用，拍摄个人名片，然后将名片上的联系人信息储存，或许你之后会丢失名片，但是你的联系人已经保存下来了。</p><p>但是保存联系人本身需要操作联系人的数据库，如何确保我们使用的数据库跟手机上默认的联系人数据存储一致呢？</p><p>这个时候，你就需要使用 ContentProvider，它能够作为一个中间人来处理数据与数据库之间的联系。</p><h3 id="你可能在想，为什么我需要一个中间人来做这件事情呢？我不能直接访问数据库来做这件事情吗？"><a href="# 你可能在想，为什么我需要一个中间人来做这件事情呢？我不能直接访问数据库来做这件事情吗？" class="headerlink" title="你可能在想，为什么我需要一个中间人来做这件事情呢？我不能直接访问数据库来做这件事情吗？"></a>你可能在想，为什么我需要一个中间人来做这件事情呢？我不能直接访问数据库来做这件事情吗？</h3><p>这样做有几个好处:</p><ol><li>修改相关的数据方便。</li><li>能够利用 Android 的各种相关 Class 类，如 Cursor Adapter。</li><li>能够让更多的应用能够 Access，而且相应的安全性也会提高（ContentProvider 用到的什么方法呢？要研究一下）。</li></ol><p>所以上面那个问题怎么解决呢？</p><p>使用自己的数据库？不，这行不通，因为系统的数据库无法访问你自己创建的数据库，答案就是使用 contentprovider,ContentProvider 的处理对你来说完全是 BlackBox.</p><h3 id="怎么用？"><a href="# 怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h3><p><img src="http://harchiko.qiniudn.com/content_provider_explicit.png" alt="detail"><br>如上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ContentResolver contentResolver = getContentResolver();</span><br><span class="line">Cursor cursor = contentResolver.query(UserDictionary.Words.CONTENT_URI, <span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何写好 README 文档]]></title>
      <url>http://blog.zhaochunqi.com/2016/03/28/how-to-write-a-readme/</url>
      <content type="html"><![CDATA[<hr><p>这是一个教你怎么写 <code>README</code> 的教程 </p><p><img src="https://img.shields.io/badge/lauguage-Chinese-green.svg" alt=""></p><a id="more"></a><h2 id=" 引言 "><a href="# 引言 "class="headerlink"title=" 引言 "></a> 引言 </h2><p> 作为一个懒人，在有限的环境中，尽量的将一些重复性的活动能够自动化那是坠吼滴。</p><h2 id=" 标题 "><a href="# 标题 "class="headerlink"title=" 标题 "></a>标题 </h2><ol><li><p> 一图胜千言 </p><p> 使用: <a href="http://shields.io"target="_blank"rel="external">shields.io</a> 标明项目的一些重要属性如：</p><ul><li>测试是否通过 </li><li> 代码覆盖率 </li><li> 使用的语言是什么 </li></ul></li><li><p> 分割线 </p></li><li><p> 一句话介绍 </p></li></ol><h2 id=" 目录 "><a href="# 目录 "class="headerlink"title=" 目录 "></a> 目录 </h2><p> 简单的使用相对路径将下面的目录结构写一下，一般放在最后写。</p><h2 id=" 内容 "><a href="# 内容 "class="headerlink"title=" 内容 "></a>内容 </h2><p> 没啥好说的。</p><h2 id="License"><a href="#License"class="headerlink"title="License"></a>License</h2><p>证书 关于开源很多人有误解以为放在 github 上的开放 repo 就可以随便用了，其实不然，留意证书的类型，尊重作者的版权和辛勤劳动是很重要的。具体推荐看 <a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html"target="_blank"rel="external">http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html</a>了解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">The MIT License (MIT)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2016 Alex Zhao</span><br><span class="line"></span><br><span class="line">Permission is hereby granted, free of charge, to any person obtaining a copy</span><br><span class="line">of this software and associated documentation files (the &quot;Software&quot;), to deal</span><br><span class="line">in the Software without restriction, including without limitation the rights</span><br><span class="line">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span><br><span class="line">copies of the Software, and to permit persons to whom the Software is</span><br><span class="line">furnished to do so, subject to the following conditions:</span><br><span class="line"></span><br><span class="line">The above copyright notice and this permission notice shall be included in all</span><br><span class="line">copies or substantial portions of the Software.</span><br><span class="line"></span><br><span class="line">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span><br><span class="line">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span><br><span class="line">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span><br><span class="line">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span><br><span class="line">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span><br><span class="line">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span><br><span class="line">SOFTWARE.</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[.bash_profile vs .bashrc]]></title>
      <url>http://blog.zhaochunqi.com/2015/12/18/bash-config-files/</url>
      <content type="html"><![CDATA[<p>Bash 的配置文件位置包括 <code>.bash_profile</code> 和 <code>.bashrc</code>，那这两个配置文件有什么区别呢？</p><a id="more"></a><p><img src="http://harchiko.qiniudn.com/54002458_p0.jpg" alt=""></p><p>根据 <a href="http://linux.die.net/man/1/bash"target="_blank"rel="external">http://linux.die.net/man/1/bash</a> 的描述，<code>.bash_profile</code> is executed for login shells, while <code>.bashrc</code> is executed for interactive non-login shells.</p><h2 id=" 什么是 -login- 和 -non-login-shell"><a href="# 什么是 -login- 和 -non-login-shell"class="headerlink"title=" 什么是 login 和 non-login shell ?"></a>什么是 login 和 non-login shell ?</h2><p>当通过 console<strong>登录 </strong> 时（不管是通过物理机器还是远程 ssh），<code>.bash_profile</code>在初始化命令弹出之前就已经执行。</p><p>但是，当你 <strong> 已经登录进机器 </strong>，不管是通过 Gnome 还是 KDE 的 xterm，那么<code>.bashrc</code> 在窗口弹出之前执行。而且，<code>.bashrc</code>在使用 <code>/bin/bash</code> 在 Terminal 调用时同样会执行。</p><h2 id=" 为什么是两个不同的文件？"><a href="# 为什么是两个不同的文件？"class="headerlink"title=" 为什么是两个不同的文件？"></a>为什么是两个不同的文件？</h2><p><code>.bash_profile</code>会在每次登录之前打印一长串的诊断信息，如果你只想在启动时看到，使用 <code>.bash_profile</code>, 如果放在<code>.bashrc</code> 中，你会在每一次新启动一个 Terminal 时候看到一次。</p><h2 id="Mac-OS-X-–- 一个例外 "><a href="#Mac-OS-X-–- 一个例外 "class="headerlink"title="Mac OS X – 一个例外 "></a>Mac OS X – 一个例外 </h2><p> 每一次新启动一个 terminal 窗口时，调用 <code>.bash_profile</code> 而不是 <code>.bashrc</code>, 其它 GUI 终端模拟器也可能这样做，但是多数不是这样做的。</p><h2 id=" 建议 "><a href="# 建议 "class="headerlink"title=" 建议 "></a> 建议 </h2><p> 多数情况下，分开管理不是很方便，<strong>当你想要设定一个环境变量的时候，你想要两个都生效 </strong>, 你可以通过在<code>.bash_profile</code> 中执行命令 <code>source .bashrc</code>，然后在<code>.bashrc</code> 中写入 PATH 或者其他的设定。</p><p>添加如下命令到 <code>.bash_profile</code> 中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [<span class="_">-f</span> ~/.bashrc ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>这样当你登录到 console 时，<code>.bashrc</code>会被调用。</p><h2 id=" 参考链接 "><a href="# 参考链接 "class="headerlink"title=" 参考链接 "></a>参考链接</h2><p><a href="http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html"target="_blank"rel="external">http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html</a></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac 下开机启动 Aria2]]></title>
      <url>http://blog.zhaochunqi.com/2015/12/13/aria2-auto-start/</url>
      <content type="html"><![CDATA[<p>前几天看了少数派的文章 <a href="http://sspai.com/32167" target="_blank" rel="external">http://sspai.com/32167</a> 配置了 Aria2，效果不错，决定将其开机启动。</p><a id="more"></a><p><img src="http://harchiko.qiniudn.com/54001369_p0.png" alt=""></p><p>##Aria2 配置 </p><p> 首先贴一下我的 config 文件:</p><blockquote><p>~/.aria2/aria2.conf</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">## &apos;#&apos; 开头为注释内容, 选项都有相应的注释说明, 根据需要修改 ##</span><br><span class="line">## 被注释的选项填写的是默认值, 建议在需要修改时再取消注释  ##</span><br><span class="line"></span><br><span class="line">## 文件保存相关 ##</span><br><span class="line"></span><br><span class="line"># 文件的保存路径 (可使用绝对路径或相对路径), 默认: 当前启动位置</span><br><span class="line">dir=/Users/alex/Downloads</span><br><span class="line"># 启用磁盘缓存, 0 为禁用缓存, 需 1.16 以上版本, 默认:16M</span><br><span class="line">#disk-cache=32M</span><br><span class="line"># 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc</span><br><span class="line"># 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc</span><br><span class="line"># falloc 和 trunc 则需要文件系统和内核支持</span><br><span class="line"># NTFS 建议使用 falloc, EXT3/4 建议 trunc, MAC 下需要注释此项</span><br><span class="line"># file-allocation=none</span><br><span class="line"># 断点续传</span><br><span class="line">continue=true</span><br><span class="line"></span><br><span class="line">## 下载连接相关 ##</span><br><span class="line"></span><br><span class="line"># 最大同时下载任务数, 运行时可修改, 默认:5</span><br><span class="line">max-concurrent-downloads=5</span><br><span class="line"># 同一服务器连接数, 添加时可指定, 默认:1</span><br><span class="line">max-connection-per-server=5</span><br><span class="line"># 最小文件分片大小, 添加时可指定, 取值范围 1M -1024M, 默认:20M</span><br><span class="line"># 假定 size=10M, 文件为 20MiB 则使用两个来源下载; 文件为 15MiB 则使用一个来源下载</span><br><span class="line">min-split-size=10M</span><br><span class="line"># 单个任务最大线程数, 添加时可指定, 默认:5</span><br><span class="line">split=5</span><br><span class="line"># 整体下载速度限制, 运行时可修改, 默认:0</span><br><span class="line">#max-overall-download-limit=0</span><br><span class="line"># 单个任务下载速度限制, 默认:0</span><br><span class="line">#max-download-limit=0</span><br><span class="line"># 整体上传速度限制, 运行时可修改, 默认:0</span><br><span class="line">#max-overall-upload-limit=0</span><br><span class="line"># 单个任务上传速度限制, 默认:0</span><br><span class="line">#max-upload-limit=0</span><br><span class="line"># 禁用 IPv6, 默认:false</span><br><span class="line">disable-ipv6=true</span><br><span class="line"></span><br><span class="line">## 进度保存相关 ##</span><br><span class="line"></span><br><span class="line"># 从会话文件中读取下载任务</span><br><span class="line">input-file=/usr/local/Cellar/aria2/aria2.session</span><br><span class="line"># 在 Aria2 退出时保存 ` 错误 / 未完成 ` 的下载任务到会话文件</span><br><span class="line">save-session=/usr/local/Cellar/aria2/aria2.session</span><br><span class="line"># 定时保存会话, 0 为退出时才保存, 需 1.16.1 以上版本, 默认:0</span><br><span class="line">#save-session-interval=60</span><br><span class="line"></span><br><span class="line">## RPC 相关设置 ##</span><br><span class="line"></span><br><span class="line"># 启用 RPC, 默认:false</span><br><span class="line">enable-rpc=true</span><br><span class="line"># 允许所有来源, 默认:false</span><br><span class="line">rpc-allow-origin-all=true</span><br><span class="line"># 允许非外部访问, 默认:false</span><br><span class="line">rpc-listen-all=true</span><br><span class="line"># 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同</span><br><span class="line">#event-poll=select</span><br><span class="line"># RPC 监听端口, 端口被占用时可以修改, 默认:6800</span><br><span class="line">#rpc-listen-port=6800</span><br><span class="line"># 设置的 RPC 授权令牌, v1.18.4 新增功能, 取代 --rpc-user 和 --rpc-passwd 选项</span><br><span class="line">#rpc-secret=&lt;TOKEN&gt;</span><br><span class="line"># 设置的 RPC 访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项</span><br><span class="line">#rpc-user=&lt;USER&gt;</span><br><span class="line"># 设置的 RPC 访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项</span><br><span class="line">#rpc-passwd=&lt;PASSWD&gt;</span><br><span class="line"></span><br><span class="line">## BT/PT 下载相关 ##</span><br><span class="line"></span><br><span class="line"># 当下载的是一个种子(以.torrent 结尾) 时, 自动开始 BT 任务, 默认:true</span><br><span class="line">#follow-torrent=true</span><br><span class="line"># BT 监听端口, 当端口被屏蔽时使用, 默认:6881-6999</span><br><span class="line">listen-port=51413</span><br><span class="line"># 单个种子最大连接数, 默认:55</span><br><span class="line">#bt-max-peers=55</span><br><span class="line"># 打开 DHT 功能, PT 需要禁用, 默认:true</span><br><span class="line">enable-dht=false</span><br><span class="line"># 打开 IPv6 DHT 功能, PT 需要禁用 </span><br><span class="line">#enable-dht6=false</span><br><span class="line"># DHT 网络监听端口, 默认:6881-6999</span><br><span class="line">#dht-listen-port=6881-6999</span><br><span class="line"># 本地节点查找, PT 需要禁用, 默认:false</span><br><span class="line">#bt-enable-lpd=false</span><br><span class="line"># 种子交换, PT 需要禁用, 默认:true</span><br><span class="line">enable-peer-exchange=false</span><br><span class="line"># 每个种子限速, 对少种的 PT 很有用, 默认:50K</span><br><span class="line">#bt-request-peer-speed-limit=50K</span><br><span class="line"># 客户端伪装, PT 需要</span><br><span class="line">peer-id-prefix=-TR2770-</span><br><span class="line">user-agent=Transmission/2.77</span><br><span class="line"># 当种子的分享率达到这个数时, 自动停止做种, 0 为一直做种, 默认:1.0</span><br><span class="line">seed-ratio=0</span><br><span class="line"># 强制保存会话, 即使任务已经完成, 默认:false</span><br><span class="line"># 较新的版本开启后会在任务完成后依然保留.aria2 文件</span><br><span class="line">#force-save=false</span><br><span class="line"># BT 校验相关, 默认:true</span><br><span class="line">#bt-hash-check-seed=true</span><br><span class="line"># 继续之前的 BT 任务时, 无需再次校验, 默认:false</span><br><span class="line">bt-seed-unverified=true</span><br><span class="line"># 保存磁力链接元数据为种子文件(.torrent 文件), 默认:false</span><br><span class="line">bt-save-metadata=true</span><br></pre></td></tr></table></figure><p> 主要是更改了下载文档路径 <code>dir=/Users/alex/Downloads</code></p><h2 id=" 添加到启动项 "><a href="# 添加到启动项 "class="headerlink"title=" 添加到启动项 "></a>添加到启动项 </h2><p> 创建文件 <code>aria2.plist</code></p><p><strong>修改 array 中的 aria2 命令为你的 aria2 命令路径, 可使用 <code>which aria2c</code> 命令查看 </strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"encoding="utf-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC"-//Apple//DTD PLIST 1.0//EN"</span><br><span class="line">"http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>KeepAlive<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">true</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>RunAtLoad<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">true</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>aria2<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/local/bin/aria2c<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>WorkingDirectory<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/alex/Downloads<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p> 可以添加参数到 <code>&lt;array&gt;</code> 中, 添加到第一行命令之后。</p></blockquote><p>将文件复制到 <code>~/Library/LaunchAgents</code> 下 </p><p> 进入文件夹，并 <strong> 修改文件权限为 644</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 644 aria2.plist</span><br></pre></td></tr></table></figure><p>执行以下命令 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">launchctl load aria2.plist</span><br><span class="line">launchctl start aria2</span><br></pre></td></tr></table></figure><p> 大功告成</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用 Travis-CI 生成发布 Hexo 博客]]></title>
      <url>http://blog.zhaochunqi.com/2015/11/27/travis-ci-deploy-hexo/</url>
      <content type="html"><![CDATA[<p>本篇文章将指导你如何使用 Travis-CI 自动部署 hexo 生成的静态博客到 github 上。</p><a id="more"></a><h2 id="背景介绍"><a href="# 背景介绍" class="headerlink" title="背景介绍"></a>背景介绍 </h2><p> 在最新的 github 中，如果想要你的 github repo 可以作为博客，需要命名为类似 <code>zhaochunqi.github.io</code>这样的。<br>在这里，我在此 repo 下建立了两个完全不同的分支，source 和 master 分支。</p><p>source 分支放置 hexo 的一些源文件，master 分支放置静态博客资源。</p><p><strong>我们需要做的就是获取到 source 分支的改动，自动 deploy 到 master 分支 </strong></p><p> 所以步骤就是： 获取改动 -&gt;deploy</p><h2 id="travis-CI"><a href="#travis-CI" class="headerlink" title="travis-CI"></a>travis-CI</h2><p>travis-CI(<a href="https://travis-ci.org/" target="_blank" rel="external">https://travis-ci.org/</a>)是集成测试工具，目前只支持 github。</p><p>在 travis-CI 中对 <code>zhaochunqi.github.io</code> 开启自动构建，配置如下：<br><img src="http://harchiko.qiniudn.com/Screen%20Shot%202015-11-28%20at%205.37.05%20AM.png" alt=""><br>（建议开启 Build only if .travis.yml is prezent.)</p><h2 id=" 配置 -travis-yml"><a href="# 配置 -travis-yml"class="headerlink"title=" 配置.travis.yml"></a>配置 <code>.travis.yml</code></h2><h2 id=" 获取 github 权限 "><a href="# 获取 github 权限 "class="headerlink"title=" 获取 github 权限 "></a> 获取 github 权限 </h2><p> 两种方法</p><pre><code>1. SSH
2. github token
</code></pre><p>这里采用的是 github token 的方法，（SSH 配置较为复杂）</p><p>点击头像 -&gt;settings-&gt; Personal access tokens 新建一个 token,<strong>会获取到一串字符 </strong>，记录下下面需要用到。<br><img src="http://harchiko.qiniudn.com/Screen%20Shot%202015-11-28%20at%206.48.06%20AM.png" alt=""></p><h2 id=" 将 token 配置到 travis-CI"><a href="# 将 token 配置到 travis-CI"class="headerlink"title=" 将 token 配置到 travis-CI"></a> 将 token 配置到 travis-CI</h2><h3 id=" 安装 Travis-CI 命令行工具 "><a href="# 安装 Travis-CI 命令行工具 "class="headerlink"title=" 安装 Travis-CI 命令行工具 "></a>安装 Travis-CI 命令行工具 </h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install travis</span><br></pre></td></tr></table></figure><h3 id=" 登陆 Travis-CI"><a href="# 登陆 Travis-CI"class="headerlink"title=" 登陆 Travis CI"></a> 登陆 Travis CI</h3><p>需要输入 Github 账号和密码 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis login --auto</span><br></pre></td></tr></table></figure><p> 加密环境变量（token）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis encrypt GH_OWNER=super_secret</span><br></pre></td></tr></table></figure><p>此命令会写入加密后的环境变量到.travis.yml 中.</p><p>这样，使用 <code>https://${GH_OAUTH_TOKEN}@github.com/${GH_OWNER}/${GH_PROJECT_NAME}</code> 即可进行正常的 push 和 pull 了。</p><p>最后贴一下我的配置 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">  global:</span></span><br><span class="line"><span class="attr">    - secure:</span> MP2VsXSOwwEQ/<span class="number">4</span>JPcZr1N1JVyH8ijuFJiqmHZgxISfw/Tm0cNHm3nKJU6JKeYOqdkxCgGooGuC+QSS5c1YWDzWgWfYv5KL+tzbBvuQFLBkBLfa484xCkSByjwLP+lrbpNTqHkA/T+v55P+L4RZ6kzq5S5VigQ/qnz3woAm7eu10xlb9T6tgt4mkbzkSOywgGD5+OREgXxeuCD1a5dIWirKR05Epck3c4QxdQkqyQ+raLqZ+<span class="number">2</span>SlBHtJii6M9IUZ5JxdhbChfo4QKODh7Er00+vzSKd77J0kdKEK/u8ooci6I7KFd1mA+<span class="number">3</span>RuLYhCbMLXsD8O7ExAmyRPll2VwQbdV+<span class="number">3</span>nsxGRoqFLGPzYkXWgVEoxqWN09XJ8h7Ue2NKDvJcydzFzy4MXfFkmm84eaKuK+VwWYtFJMeUa7AqclKqwaaxZyfzN/s0axypIIlyaktNocfC8nbp+JsXqsVVXTtPG8IgVn005vsY4BpFD4f6m5orLvNTrl17mVWj9X/<span class="number">1</span>kLT/GIbsSqz1D7Cxwchqlv8uPiBR9ZvF824+fQ3WYba97CpeO+mfY0J+ymm4Mx/t7T3vlMROiGz5xeFDiPX0Cv8L8F1wnSRNRUc0v2rrW6UK9VGdq71aCY2+JMmT3Ev1UHV2GnKzYxXcerAInZJPpw4UK1aOCylQ2PNkRdyXkmAAYc5iKs=</span><br><span class="line"><span class="attr">    - GH_OWNER:</span> zhaochunqi</span><br><span class="line"><span class="attr">    - GH_PROJECT_NAME:</span> zhaochunqi.github.io</span><br><span class="line">    </span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> source</span><br><span class="line">    </span><br><span class="line"><span class="attr">language:</span> node_js</span><br><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">'0.12'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">  -</span> npm install hexo-cli -g</span><br><span class="line"><span class="bullet">  -</span> npm install</span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> git clone -b master https://$&#123;GH_OAUTH_TOKEN&#125;@github.com/$&#123;GH_OWNER&#125;/$&#123;GH_PROJECT_NAME&#125; public</span><br><span class="line"><span class="bullet">  -</span> hexo g</span><br><span class="line"><span class="bullet">  -</span> git config --global user.name <span class="string">"zhaochunqi"</span></span><br><span class="line"><span class="bullet">  -</span> git config --global user.email git@zhaochunqi.com</span><br><span class="line"><span class="bullet">  -</span> cd public</span><br><span class="line"><span class="bullet">  -</span> git add --all</span><br><span class="line">  <span class="comment"># - git commit -m `$(echo `date"+Site updated %Y-%m-%d %H:%M:%S"`)`</span></span><br><span class="line">  <span class="comment"># - git commit -m'$(curl -s http://whatthecommit.com/index.txt)'</span></span><br><span class="line"><span class="bullet">  -</span> git commit -m <span class="string">"$(curl -s http://whatthecommit.com/ | awk '/&lt;p&gt;/ &#123;sub("</span>&lt;p&gt;<span class="string">","</span><span class="string">"); print &#125;')"</span></span><br><span class="line"><span class="bullet">  -</span> git push -f origin master</span><br></pre></td></tr></table></figure><p> 这里面除了 global 这里其他都不难懂，看一下 travis 的生命周期就全明白了。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常用的终端命令]]></title>
      <url>http://blog.zhaochunqi.com/2015/11/26/useful-terminal-commands/</url>
      <content type="html"><![CDATA[<p>介绍一些常用的 Linux 命令，这些命令能够在终端下极大的方便我们的操作。</p><a id="more"></a><p><img src="http://harchiko.qiniudn.com/S27YSIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIHAlIPhe3WkMAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIlAcG39LatBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAhcCQi+V3caQ4AAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIBASUDwLb1tKwECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECVwKC79WdxhAgQ.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo !!</span><br></pre></td></tr></table></figure><p>使用 sudo 权限执行上一条命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure><p>Serve current directory tree at <a href="http://$HOSTNAME:8000/"target="_blank"rel="external">http://$HOSTNAME:8000/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^foo^bar</span><br></pre></td></tr></table></figure><p>替换字符后重新执行上面的命令 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl-x e</span><br></pre></td></tr></table></figure><p><img src="http://harchiko.qiniudn.com/show-ctrl-x-e.gif"alt=""><br> 迅速的在终端激活文本编辑器用来写命令。 具体用法是按住 Ctrl+x 然后再按 e，系统会自动调用默认的编辑器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;space&gt;<span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>在命令之前添加空格，命令不会记录在 bash 记录中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl ifconfig.me</span><br></pre></td></tr></table></figure><p>获取你的外网 IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl<span class="_">-l</span></span><br></pre></td></tr></table></figure><p>清除终端的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">cd</span> /tmp &amp;&amp; ls)</span><br></pre></td></tr></table></figure><p>进入一个目录，执行命令后回到原目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/issue</span><br></pre></td></tr></table></figure><p>查看安装的 Linux 发行版</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[添加一个随机的 Git 提交说明]]></title>
      <url>http://blog.zhaochunqi.com/2015/11/26/random-git-commit/</url>
      <content type="html"><![CDATA[<p><strong> 代码 </strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"<span class="variable">$(curl -s http://whatthecommit.com/ | awk'/&lt;p&gt;/ &#123;sub("&lt;p&gt;", "")</span>; print &#125;')"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p> 适用于不是很重要的项目中的提交说明，工作中慎用。</p><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202015-11-26%20at%202.33.14%20AM.png"alt=""></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[扩充 Mac 原生字典库]]></title>
      <url>http://blog.zhaochunqi.com/2015/11/25/extends-mac-dict-apps/</url>
      <content type="html"><![CDATA[<p>DictUnifer 是一款在 Mac 下能够转换字典格式的软件。把第三方的词库转换成「Mac 词典」支持的格式。</p><a id="more"></a><p><img src="http://harchiko.qiniudn.com/Screen%20Shot%202015-11-25%20at%201.39.29%20AM.png" alt=""></p><p>使用方法也是非常简便：拖动 stardic 的字典文件上去即可 </p><p><img src="http://harchiko.qiniudn.com/Dictunifier.gif"alt=""></p><p> 另外，字典下载地址： <a href="http://abloz.com/huzheng/stardict-dic/" target="_blank" rel="external">http://abloz.com/huzheng/stardict-dic/</a></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[纪录片 - 陈冠希]]></title>
      <url>http://blog.zhaochunqi.com/2015/11/24/vice-edc/</url>
      <content type="html"><![CDATA[<h2 id="《还记得我吗》–陈冠希"><a href="#《还记得我吗》–陈冠希" class="headerlink" title="《还记得我吗》–陈冠希"></a>《还记得我吗》–陈冠希 </h2><p> 陈冠希是谁? 这世界上有几亿人看过他的照片；陈冠希在做什么？媒体上的他声名狼藉；VICE 拍陈冠希？听起来很刺激，也合情合理 —— 他身上具备一切精彩故事的必要元素，他就是 VICE 要讲的故事。</p><a id="more"></a><p>分享一下 Vice 拍摄的陈冠希的记录片：</p><p><img src="http://harchiko.qiniudn.com/11886613_214644.jpg" alt=""></p><p>第一篇：</p><iframe height="498"width="510"src="http://player.youku.com/embed/XMTM5OTgzMDM4NA=="frameborder="0"allowfullscreen></iframe><p>第二篇：</p><iframe height="498"width="510"src="http://player.youku.com/embed/XMTQwMDc2NzIxMg=="frameborder="0"allowfullscreen></iframe><p>第三篇：</p><iframe height="498"width="510"src="http://player.youku.com/embed/XMTQwMTY1NzkyMA=="frameborder="0" allowfullscreen></iframe><p>记忆很深的一句话，有人问我，如果能够再来，你觉得你有什么需要改变的？ 我什么都不改变。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[YAML 简介]]></title>
      <url>http://blog.zhaochunqi.com/2015/11/24/yaml/</url>
      <content type="html"><![CDATA[<h2 id="YAML 简介"><a href="#YAML 简介" class="headerlink" title="YAML 简介"></a>YAML 简介 </h2><p><code>YAML</code> <strong>[YAML Ain’t Markup Language]</strong></p><p> 和 GNU 一样，YAML 是一个递归着说“不”的名字。不同的是，GNU 对 UNIX 说不，YAML 说不的对象是 XML。</p><a id="more"></a><p><img src="http://harchiko.qiniudn.com/3389850854144361888.jpeg" alt="image"></p><h2 id="语法"><a href="# 语法" class="headerlink" title="语法"></a>语法 </h2><p><code>Structure</code> 通过 <strong> 空格 </strong> 来展示。<code>Sequence</code>里的项用”-“来代表，<code>Map</code>里的键值对用”:”分隔.<br>这几乎就是所有的语法了.</p><blockquote><p>注意是空格不是 <code>TAB</code>, <code>Makefile</code> 刚好相反。</p></blockquote><h2 id="举例"><a href="# 举例" class="headerlink" title="举例"></a>举例 </h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> John Smith</span><br><span class="line"><span class="attr">age:</span> <span class="number">37</span></span><br><span class="line"><span class="attr">spouse:</span></span><br><span class="line"><span class="attr">    name:</span> Jane Smith</span><br><span class="line"><span class="attr">    age:</span> <span class="number">25</span></span><br><span class="line"><span class="attr">children:</span></span><br><span class="line"><span class="attr">    -   name:</span> Jimmy Smith</span><br><span class="line"><span class="attr">        age:</span> <span class="number">15</span></span><br><span class="line"><span class="attr">    -   name:</span> Jenny Smith</span><br><span class="line"><span class="attr">        age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><p>John 今年 37 岁，有一个幸福的四口之家。两个孩子 Jimmy 和 Jenny 活泼可爱。妻子 Jane 年轻美貌。<br> 可见 YAML 的可读性是不错。</p><p>顺便推荐下在线 yaml 解析器：<a href="http://yaml-online-parser.appspot.com/" target="_blank" rel="external">http://yaml-online-parser.appspot.com/</a></p><p>参考链接： <a href="http://www.ibm.com/developerworks/cn/xml/x-cn-yamlintro/" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/xml/x-cn-yamlintro/</a></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Dota2 国服设定]]></title>
      <url>http://blog.zhaochunqi.com/2015/11/24/dota2-steam-settings/</url>
      <content type="html"><![CDATA[<h2 id="Dota2- 国服设定"><a href="#Dota2- 国服设定" class="headerlink" title="Dota2 国服设定"></a>Dota2 国服设定 </h2><p>Dota2 在完美代理后单独出了一个国服的客户端，但是需要同时注册 Steam 帐号和国服帐号，可见国服的 Dota2 也是绑定在 Steam 上的，既然如此，倒不如直接使用 steam 客户端省事。</p><a id="more"></a><p><img src="http://harchiko.qiniudn.com/dota-2-official.jpg" alt="image"></p><p> 具体来说，使用 steam 登录国服添加的选项仅仅需要在启动项中添加 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-perfectworld</span><br></pre></td></tr></table></figure><p> 即可。</p><p>处于特殊性，如果你的 steam 客户端是英文版，但你想使你的 dota2 为中文界面，使用如下命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-language schinese</span><br></pre></td></tr></table></figure><p></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Faker.js]]></title>
      <url>http://blog.zhaochunqi.com/2015/08/24/faker-js/</url>
      <content type="html"><![CDATA[<p>Faker.js 能够生成名字、地址、电话号码等信息的库。<br><a id="more"></a></p><p> 项目地址： <a href="https://github.com/Marak/faker.js" target="_blank" rel="external">https://github.com/Marak/faker.js</a></p><p> 使用方法比较简单：</p><ul><li> 浏览器中 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src = <span class="string">"faker.js"</span> type = <span class="string">"text/javascript"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> randomName = faker.name.findName(); <span class="comment">// Caitlyn Kerluke</span></span><br><span class="line">  <span class="keyword">var</span> randomEmail = faker.internet.email(); <span class="comment">// Rusty@arne.info</span></span><br><span class="line">  <span class="keyword">var</span> randomCard = faker.helpers.createCard(); <span class="comment">// random contact card containing many properties</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ar faker = <span class="built_in">require</span>(<span class="string">'faker'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> randomName = faker.name.findName(); <span class="comment">// Rowan Nikolaus</span></span><br><span class="line"><span class="keyword">var</span> randomEmail = faker.internet.email(); <span class="comment">// Kassandra.Haley@erich.biz</span></span><br><span class="line"><span class="keyword">var</span> randomCard = faker.helpers.createCard(); <span class="comment">// random contact card containing many properties</span></span><br></pre></td></tr></table></figure><p>Faker 的 API 中包含了大量的方法，并且，有针对本地化的语言生成可以使用 <code>faker.locale = &#39;zh_CN&#39;</code>。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用 supervisor 来管理 linux 程序]]></title>
      <url>http://blog.zhaochunqi.com/2015/03/04/use-supervisor-to-manager-your-task/</url>
      <content type="html"><![CDATA[<h2 id="supervisor 简介"><a href="#supervisor 简介" class="headerlink" title="supervisor 简介"></a><code>supervisor</code>简介 </h2><p>supervisor 是使用 python 语言编写的可以监控和控制系统类 unix 进程的程序，类似于 ruby 的 god 。</p><a id="more"></a><h2 id="安装"><a href="# 安装" class="headerlink" title="安装"></a> 安装 </h2><p><code>supervisor</code> 是 python 编写，安装十分简便，只需：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$: easy_install supervisor</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="# 使用" class="headerlink" title="使用"></a>使用 </h2><p>supervisor 可以使用配置文件来启动，指定参数 -c , 默认位置使用<br>-help 查看。</p><p> 建立 <code>supervisord.conf</code> 配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[program:cow]</span><br><span class="line">command = nohup  /home/harchiko/cow/cow &amp;</span><br><span class="line">autostart = true</span><br><span class="line">autorestart = true</span><br><span class="line">[supervisord]</span><br></pre></td></tr></table></figure><p>这是用来监控 <code>cow</code> 的文件。</p><p>如果提示 </p><p><code>Error: could not find config file supervisord.</code></p><p> 那是因为缺少 <code>[supervisord]</code> 模块，如上述配置文件中添加即可。</p><h2 id="启动"><a href="# 启动" class="headerlink" title="启动"></a>启动 </h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c supervisord.conf</span><br></pre></td></tr></table></figure><p> 如是启动即可。</p><p>注意，如果想要自动重启务必加上 <code>autorestart = true</code></p><p>另外，supervisor 还有交互式命令 supervisorcli , 输入 help 查看即可了解如何操作。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[加速开发环境的搭建]]></title>
      <url>http://blog.zhaochunqi.com/2015/02/15/speed-your-working-space/</url>
      <content type="html"><![CDATA[<p>在国内，一些服务或者被墙，或者访问速度过慢，对开发者而言，这是最痛苦的，下面，介绍几种减轻痛苦的良方以飨读者。</p><a id="more"></a><h1 id="Linux- 篇"><a href="#Linux- 篇" class="headerlink" title="Linux 篇"></a>Linux 篇 </h1><p>linux 下更改源：<a href="http://mirrors.ustc.edu.cn/" title="中科大源" target="_blank" rel="external">http://mirrors.ustc.edu.cn/</a>，选择自己的 Linux 版本，然后选择对应的源配置，具体使用见<a href="https://lug.ustc.edu.cn/wiki/mirrors/help" title="配置帮助" target="_blank" rel="external">https://lug.ustc.edu.cn/wiki/mirrors/help</a></p><h1 id="HomeBrew- 篇"><a href="#HomeBrew- 篇" class="headerlink" title="HomeBrew 篇"></a>HomeBrew 篇</h1><p>github 时不时的网络中断，brew update 经常不成功，更改 git 地址为中科大 git 源的地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin http://mirrors.ustc.edu.cn/homebrew.git</span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><h1 id="Node- 篇"><a href="#Node- 篇" class="headerlink" title="Node 篇"></a>Node 篇</h1><h2 id="NVM"><a href="#NVM" class="headerlink" title="NVM"></a>NVM</h2><p>clone nvm 到本地，假设目录位于 <code>～</code><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/creationix/nvm.git</span><br></pre></td></tr></table></figure><p></p><p> 更改 nvm 镜像地址，在.bashrc 中添加 <br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># nvm</span><br><span class="line">export NVM_NODEJS_ORG_MIRROR=http://dist.u.qiniudn.com</span><br><span class="line">source ~/nvm/nvm.sh</span><br></pre></td></tr></table></figure><p></p><p><code>source .bashrc</code> 后运行 nvm</p><h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><p> 通过 <code>--registry</code> 更改参数：<br><code>$ npm --registry=https://registry.npm.taobao.org install koa</code></p><h1 id="Pypi- 篇"><a href="#Pypi- 篇" class="headerlink" title="Pypi 篇"></a>Pypi 篇 </h1><p> 通过 <code>-i</code> 更改参数:</p><p>如:<code>$ pip install web.py -i http://pypi.mirrors.ustc.edu.cn/simple</code></p><p><strong>注意后面有 <code>/simple</code></strong></p><p> 要配制成默认的话，需要创建或修改配置文件（linux 的文件在 <code>~/.pip/pip.conf</code>，windows 在<code>%HOMEPATH%\pip\pip.ini</code>），修改内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line"></span><br><span class="line">index-url = http://pypi.mirrors.ustc.edu.cn/simple</span><br></pre></td></tr></table></figure><blockquote><p> 注意，由于更改的都是非官方源，但由于选择的这些企业或学校都是属于比较靠谱的，基本不存在突然不可用的可能，如果有问题，改回来即可。</p></blockquote>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo toc 无法显示]]></title>
      <url>http://blog.zhaochunqi.com/2015/02/11/hexo-toc-problem/</url>
      <content type="html"><![CDATA[<h2 id="问题"><a href="# 问题" class="headerlink" title="问题"></a>问题 </h2><p> 使用 Hexo 渲染的时候发现有的问题有 TOC，有的文章没有 TOC。经过一番探索研究，找到了问题所在。</p><a id="more"></a><h2 id="排查"><a href="# 排查" class="headerlink" title="排查"></a>排查 </h2><ul><li> 换了 Chrome 浏览器之后发现问题依旧。排除浏览器的原因。</li></ul><ul><li><code>hexo clean</code> <code>hexo g</code>之后发现问题依旧，排除旧模板的原因。</li></ul><ul><li>更改_config 模板配置文件 TOC 模块之后问题依旧，排除模板配置原因。</li></ul><ul><li>打开 Firebug，查看 JS 代码之后发现 H2 如果标题没有的话会被设定 <code>display:none</code><br><img src="http://harchiko.qiniudn.com/hexo-toc-problem/toc_not_show.png" alt=""></li></ul><p> 至此！谜题就此揭开!</p><h2 id=" 解决办法 "><a href="# 解决办法 "class="headerlink"title=" 解决办法 "></a>解决办法 </h2><p> 写的时候添加个二级标题。也就是 ##</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[shadowsocks 使用指南]]></title>
      <url>http://blog.zhaochunqi.com/2015/02/10/shadowsocks-user-manual/</url>
      <content type="html"><![CDATA[<h2 id="关于"><a href="# 关于" class="headerlink" title="关于"></a>关于 </h2><p><strong>ShadowSocks</strong> 在上一篇的<a href="http://blog.zhaochunqi.com/Auto-Proxy/" title="Shadowsocks 透明代理的实现">Shadowsocks 透明代理的实现</a> 中提到过，本文将重点讲解一下 shadowsocks 的使用方法。</p><p>原文链接：<a href="http://blog.zhaochunqi.com/shadowsocks-user-manual/">http://blog.zhaochunqi.com/shadowsocks-user-manual/</a></p><p>作者：<a href="http://blog.zhaochunqi.com" title="http://blog.zhaochunqi.com">zhaochunqi</a></p><a id="more"></a><h2 id="ShadowSocks- 介绍"><a href="#ShadowSocks- 介绍" class="headerlink" title="ShadowSocks 介绍"></a>ShadowSocks 介绍 </h2><ul><li> 代理 / 翻强工具。</li><li>使用稳定。</li></ul><h2 id="下载"><a href="# 下载" class="headerlink" title="下载"></a>下载 </h2><p> 下载：<a href="https://github.com/shadowsocks/shadowsocks/wiki/Ports-and-Clients#windows" target="_blank" rel="external">https://github.com/shadowsocks/shadowsocks/wiki/Ports-and-Clients#windows</a>在这里选择对应版本的 shadowsocks 客户端下载。</p><p>介于目前国内访问环境的恶劣，直接提供下地址：</p><p>windows 客户端（2015-02-10）: <a href="http://harchiko.qiniudn.com/shadowsocks-user-manual/Shadowsocks-win-2.1.6.zip" target="_blank" rel="external">http://harchiko.qiniudn.com/shadowsocks-user-manual/Shadowsocks-win-2.1.6.zip</a></p><p>Mac 客户端（2015-02-10）: <a href="http://harchiko.qiniudn.com/shadowsocks-user-manual/ShadowsocksX-2.6.2.dmg" target="_blank" rel="external">http://harchiko.qiniudn.com/shadowsocks-user-manual/ShadowsocksX-2.6.2.dmg</a></p><p><strong>注意：</strong>最好先尝试下能否从官方下载。不行的话可以从我这里下载。</p><h2 id="使用"><a href="# 使用" class="headerlink" title="使用"></a>使用 </h2><p>Shadowsocks 的配置很简单：</p><p><img src="http://harchiko.qiniudn.com/shadowsocks-user-manual/shadowsocks.png" alt=""></p><p> 填写好服务器 ip，服务器端口，密码，加密方式后即可。代理端口默认即可。</p><p>打开 IE，开启 Google 试试吧!</p><p>针对 Firefox 和 Chrome 有对应的插件配置，注意使用 SOCKS5 代理即可。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Parallels 下 Vagrant 使用指南]]></title>
      <url>http://blog.zhaochunqi.com/2015/02/05/introduce-vagrant/</url>
      <content type="html"><![CDATA[<p>环境：OSX yosemite/Parallels Desktop 10</p><h2 id="Vagrant- 介绍"><a href="#Vagrant- 介绍" class="headerlink" title="Vagrant 介绍"></a>Vagrant 介绍 </h2><p>Vagrant 是一个基于 Ruby 的工具，用于创建和部署虚拟化开发环境。它 使用 Oracle 的开源 VirtualBox 虚拟化系统，使用 Chef 创建自动化虚拟环境。</p><a id="more"></a><h2 id="安装 -Vagrant"><a href="# 安装 -Vagrant" class="headerlink" title="安装 Vagrant"></a> 安装 Vagrant</h2><p>从这里 <a href="http://www.vagrantup.com/downloads" title="vagrant 下载" target="_blank" rel="external">http://www.vagrantup.com/downloads</a> 下载对应版本的 vagrant 安装。</p><h2 id="安装 -Vagrant- 插件"><a href="# 安装 -Vagrant- 插件" class="headerlink" title="安装 Vagrant 插件"></a>安装 Vagrant 插件 </h2><p> 打开 Terminal，安装 vagrant 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant plugin install vagrant-parallels</span><br></pre></td></tr></table></figure><h2 id="使用 -Vagrant"><a href="# 使用 -Vagrant" class="headerlink" title="使用 Vagrant"></a>使用 Vagrant</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir new_vagrant_project</span><br><span class="line">$ <span class="built_in">cd</span> new_vagrant_project</span><br><span class="line">$ vagrant init parallels/centos-6.5</span><br><span class="line">$ vagrant up --provider=parallels</span><br></pre></td></tr></table></figure><p>这样就成功的安装了 centos-6.5</p><h2 id="修改默认的 -Provider- 可选"><a href="# 修改默认的 -Provider- 可选" class="headerlink" title="修改默认的 Provider (可选)"></a>修改默认的 Provider (可选)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> VAGRANT_DEFAULT_PROVIDER=parallels</span><br></pre></td></tr></table></figure><p>可添加到.bashrc 或者 .zshrc(如果你使用 zsh)</p><h2 id="使用 SSH 连接"><a href="# 使用 SSH 连接" class="headerlink" title="使用 SSH 连接"></a>使用 SSH 连接 </h2><p> 进入 vagrant 所在目录：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant ssh</span><br></pre></td></tr></table></figure><p></p><h2 id="box- 选择"><a href="#box- 选择" class="headerlink" title="box 选择"></a>box 选择 </h2><p> 如果你想要其他的发行版：如 ubuntu 等，在这个网页中查找是否有你所需要的：<br><a href="https://vagrantcloud.com/boxes/search?provider=parallels" title="box" target="_blank" rel="external">https://vagrantcloud.com/boxes/search?provider=parallels</a></p><h2 id="vagrant-manager（可选 - 推荐）"><a href="#vagrant-manager（可选 - 推荐）" class="headerlink" title="vagrant manager（可选 / 推荐）"></a>vagrant manager（可选 / 推荐）</h2><p>Vagrant Manager 是在通知栏的可以管理 Vagrant 的工具。（Mac 版本 /Windows 版本都有）</p><p>具体表现如图：<br><img src="http://harchiko.qiniudn.com/introduce-vagrant/vagrant_manager.gif" alt="vagrant manager"></p><p>下载见：<a href="https://github.com/lanayotech/vagrant-manager" title="vagrant manager" target="_blank" rel="external">https://github.com/lanayotech/vagrant-manager</a></p><h3 id="Happy-Coding"><a href="#Happy-Coding" class="headerlink" title="Happy Coding ~"></a>Happy Coding ~</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[美剧订阅神器 showrss]]></title>
      <url>http://blog.zhaochunqi.com/2015/02/04/tools-for-us-TV-series/</url>
      <content type="html"><![CDATA[<p>今日同事推荐了个看美剧的神器的网站 <a href="http://showrss.info/" target="_blank" rel="external">showrss</a>,</p><a id="more"></a><h2 id="界面"><a href="# 界面" class="headerlink" title="界面"></a>界面 </h2><p> 这个网站的样子大概是这个样子的:<br><img src="http://7jpt8j.com1.z0.glb.clouddn.com/tools-for-us-TV-series/website.png" alt="showrss"></p><h3 id="使用 RSS 订阅"><a href="# 使用 RSS 订阅" class="headerlink" title="使用 RSS 订阅"></a>使用 RSS 订阅 </h3><h4 id="你还可以使用 RSS 订阅"><a href="# 你还可以使用 RSS 订阅" class="headerlink" title="你还可以使用 RSS 订阅"></a> 你还可以使用 RSS 订阅 </h4><p> 注册进去后，可以订阅各种美剧如：Grey’s Anatomy, The Big Bang theory 等，</p><h4 id="在界面中点击你喜欢的美剧名称即可订阅"><a href="# 在界面中点击你喜欢的美剧名称即可订阅" class="headerlink" title="在界面中点击你喜欢的美剧名称即可订阅:"></a>在界面中点击你喜欢的美剧名称即可订阅:</h4><p><img src="http://7jpt8j.com1.z0.glb.clouddn.com/tools-for-us-TV-series/pick_series.png" alt="pickseries"></p><h4 id="如果你想知道下一集是什么的话，网站还提供计划表"><a href="# 如果你想知道下一集是什么的话，网站还提供计划表" class="headerlink" title="如果你想知道下一集是什么的话，网站还提供计划表:"></a>如果你想知道下一集是什么的话，网站还提供计划表:</h4><p><img src="http://7jpt8j.com1.z0.glb.clouddn.com/tools-for-us-TV-series/schedule.png" alt="schedule"></p><h4 id="你还可以使用 RSS 订阅 -1"><a href="# 你还可以使用 RSS 订阅 -1" class="headerlink" title="你还可以使用 RSS 订阅"></a>你还可以使用 RSS 订阅 </h4><p><img src="http://7jpt8j.com1.z0.glb.clouddn.com/tools-for-us-TV-series/feeds.png" alt="rss"></p><h4 id="在这里面，你可以进行："><a href="# 在这里面，你可以进行：" class="headerlink" title="在这里面，你可以进行："></a> 在这里面，你可以进行：</h4><ul><li>单集 RSS 订阅 </li><li> 个人剧集订阅 </li><li> 剧集时间表订阅 (提供 rss 和 iCalendar 格式)</li><li> 网站信息订阅（这个不重要)</li></ul>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于 Shadowsocks 透明代理的实现]]></title>
      <url>http://blog.zhaochunqi.com/2015/02/04/Auto-Proxy/</url>
      <content type="html"><![CDATA[<p><strong>本文只是提供了一个透明代理实现的思路，具体代码等待后续补充。</strong></p><a id="more"></a><p>程序员们最在意的，可能就是网络跟设备配置了。</p><p>做一个透明代理，能够做到：</p><pre><code>自动翻墙，本地无需配置。
</code></pre><h2 id="网络拓扑图"><a href="# 网络拓扑图" class="headerlink" title="网络拓扑图"></a>网络拓扑图 </h2><p><img src="http://harchiko.qiniudn.com/Auto-Proxy/autoproxy_map.png" alt="透明代理网络拓扑图"></p><h2 id="需求"><a href="# 需求" class="headerlink" title="需求"></a> 需求 </h2><ol><li> 一台外网 VPS（能被中国大陆访问到，能够访问到 Facebook 等网站）</li><li>一台本地 Linux 服务器 (此处可以用智能路由器代替)。</li></ol><h2 id="方案设想"><a href="# 方案设想" class="headerlink" title="方案设想"></a> 方案设想 </h2><ol><li> 本地的 Linux 服务器作为网关， 处理本地流量和需要代理的流量。</li><li>本地服务器将需要代理的流量转发给 Shadowsocks 并通过 Shadowsocks 来实现代理功能。</li><li>流量转发到 Cow 中，然后通过 Cow 来判断需要自动翻墙的网址。</li></ol><h2 id="具体方案"><a href="# 具体方案" class="headerlink" title="具体方案"></a>具体方案 </h2><ol><li> 在 VPS 中安装 Shadowsocks，并在本地客户端测试是否成功。</li><li>在本地 Linux 服务器中部署 Cow，通过 Cow 来进行 ShadowSocks 代理。</li><li>使用 iptables 将流量转发到 Cow 本地监控的端口。</li></ol>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 更改默认 Google 字体]]></title>
      <url>http://blog.zhaochunqi.com/2015/01/27/change-google-font-to-360/</url>
      <content type="html"><![CDATA[<p> 因为一些国内的客观原因，google 的访问速度一直很慢，通过 firebug 看了下 google 相关的服务加载速度超过了 1s 种，而且经常加载不成功。</p><a id="more"></a><p> 更改方法：</p><p>terminal 中查找 themes 里对应 googlefont 的数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -ir googlefont themes/</span><br></pre></td></tr></table></figure><p> 找到对应的地方替换为 360 的字体源：</p><p>360 前端 CDN 网站：<a href="http://libs.useso.com/" title="360 前端 CDN" target="_blank" rel="external">http://libs.useso.com/</a></p><p><strong> 本人对 360 不黑不粉，请纠结 360 的让道 </strong></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[xpath 简明教程]]></title>
      <url>http://blog.zhaochunqi.com/2015/01/23/how-to-use-xpath/</url>
      <content type="html"><![CDATA[<h2 id="什么是 xpath"><a href="# 什么是 xpath" class="headerlink" title="什么是 xpath?"></a>什么是 xpath?</h2><blockquote><p>XPath 是一门在 XML 文档中查找信息的语言。XPath 可用来在 XML 文档中对元素和属性进行遍历。</p></blockquote><a id="more"></a><h2 id="XPath- 术语"><a href="#XPath- 术语" class="headerlink" title="XPath 术语"></a>XPath 术语 </h2><table><thead><tr><th> 术语 </th><th> 描述 </th></tr></thead><tbody><tr><td> 节点 (node)</td><td> 在 XPath 中，有七种类型的节点：元素、属性、文本、命名空间、处理指令、注释以及文档（根）节点。XML 文档是被作为节点树来对待的。树的根被称为文档节点或者根节点。</td></tr><tr><td>基本值（或称原子值，Atomic value）</td><td>无父无子的节点 </td></tr><tr><td> 项目（Item）</td><td>基本值或节点 </td></tr><tr><td> 节点关系 </td><td> 父、子、同胞等 </td></tr></tbody></table><h2 id="XPath- 用法"><a href="#XPath- 用法" class="headerlink" title="XPath 用法"></a>XPath 用法</h2><p> 选取节点 </p><blockquote><p> 下面列举了最有用的节点表达式 </p></blockquote><table><thead><tr><th> 表达式 </th><th> 描述 </th></tr></thead><tbody><tr><td>nodename</td><td> 选取此节点的所有子节点。</td></tr><tr><td>/</td><td>从根节点选取。</td></tr><tr><td>//</td><td>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td></tr><tr><td>.</td><td>选取当前节点。</td></tr><tr><td>..</td><td>选取当前节点的父节点。</td></tr><tr><td>@</td><td>选取属性。</td></tr></tbody></table><p><strong>text() 选取节点内元素 </strong></p><p> 下面以一段 xml 代码为例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bookstore</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">"eng"</span>&gt;</span>Harry Potter<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">price</span>&gt;</span>29.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">book</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">"eng"</span>&gt;</span>Learning XML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">price</span>&gt;</span>39.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bookstore</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>路径表达式 </th><th> 结果 </th></tr></thead><tbody><tr><td>bookstore</td><td> 选取 bookstore 元素的所有子节点。</td></tr><tr><td>/bookstore</td><td>选取根元素 bookstore。注释：假如路径起始于正斜杠 (/)，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td>bookstore/book</td><td> 选取属于 bookstore 的子元素的所有 book 元素。</td></tr><tr><td>//book</td><td>选取所有 book 子元素，而不管它们在文档中的位置。</td></tr><tr><td>bookstore//book</td><td>选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td></tr><tr><td>//@lang</td><td>选取名为 lang 的所有属性。</td></tr></tbody></table><h2 id="谓语"><a href="# 谓语" class="headerlink" title="谓语"></a>谓语 </h2><p> 谓语用来查找某个特定的节点或者包含某个指定的值的节点。<br>谓语被嵌在方括号中。</p><table><thead><tr><th>路径表达式 </th><th> 结果 </th></tr></thead><tbody><tr><td>/bookstore/book<a href="http://www.oschina.net/" title="开源中国" target="_blank" rel="external">1</a></td><td> 选取属于 bookstore 子元素的第一个 book 元素。</td></tr><tr><td>/bookstore/book[last()]</td><td>选取属于 bookstore 子元素的最后一个 book 元素。</td></tr><tr><td>/bookstore/book[last()-1]</td><td>选取属于 bookstore 子元素的倒数第二个 book 元素。</td></tr><tr><td>/bookstore/book[position()&lt;3]</td><td>选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td></tr><tr><td>//title[@lang]</td><td>选取所有拥有名为 lang 的属性的 title 元素。</td></tr><tr><td>//title[@lang=’eng’]</td><td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td></tr><tr><td>/bookstore/book[price&gt;35.00]</td><td>选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td></tr><tr><td>/bookstore/book[price&gt;35.00]/title</td><td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table><h2 id="实战"><a href="# 实战" class="headerlink" title="实战"></a>实战 </h2><p> 以 <a href="http://www.oschina.net/" title="开源中国" target="_blank" rel="external">开源中国 </a> 为例，我们来试试 XPath 能做什么？</p><ol><li><p>假设我们想要获取图示部分的内容：<br><img src="http://harchiko.qiniudn.com/how-to-use-xpath/oschina.png" alt="开源中国" title="开源中国"></p></li><li><p>打开 Firebug，定位到这一部分：<br><img src="http://harchiko.qiniudn.com/how-to-use-xpath/oschina-firebug.png" alt="Firebug" title="firebug"><br>xpath 写为: <code>id(&#39;ProjectNews&#39;)/ul/li/a</code></p></li><li><p>使用插件 xpath checker 查看到获取到的信息 <br><img src="http://harchiko.qiniudn.com/how-to-use-xpath/xpath.png" alt="xpath" title="xpath"></p></li></ol><p> 获取到了。</p><h2 id="美女"><a href="# 美女" class="headerlink" title="美女"></a>美女 </h2><p> 比如： 下载花瓣中这个画板的图片 <a href="http://huaban.com/boards/293742/" target="_blank" rel="external">http://huaban.com/boards/293742/</a></p><p> 图片如图：<br><img src="http://harchiko.qiniudn.com/how-to-use-xpath/huaban.png" alt="花瓣美女"></p><p>要下载这里面每一个美女的图片，重复我们之前的步骤：</p><p>为了找到图片的 URL，打开 firebug，找到图片对应的 xpath 路径，经过一番尝试：<code>//div/div/div/div/a/img[1][@width=&quot;236&quot;]</code>可以顺利找到所有的图片。</p><p><img src="http://harchiko.qiniudn.com/how-to-use-xpath/huaban_xpath_01.png" alt="xpath"></p><p>通过 <code>//div/div/div/div/a/img[1][@width=&quot;236&quot;]/@src</code> 即可顺利找到所有图片的 URL。</p><p><img src="http://harchiko.qiniudn.com/how-to-use-xpath/huaban_xpath_02.png" alt="xpath"></p><p>这样所有的 xpath 都获取到了。</p><p>这样就获取到了这些地址，但这些地址并不是原图大小的，对比原图与这个地址，发现后面 236 更改为 658 即可获取到大图地址。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何确定 python 运行所在的文件位置]]></title>
      <url>http://blog.zhaochunqi.com/2015/01/23/python-runs-directory/</url>
      <content type="html"><![CDATA[<p>如何确定 python 脚本的位置？<br>python 脚本有个 <code>__file__</code> 属性，能够确定脚本所在的位置。但由于运行文件夹的不同，<code>__file__</code>的相对路径也不同。</p><a id="more"></a><h2 id="如何确定当前脚本的绝对路径"><a href="# 如何确定当前脚本的绝对路径" class="headerlink" title="如何确定当前脚本的绝对路径"></a>如何确定当前脚本的绝对路径 </h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">print</span> os.path.realpath(__file__)</span><br></pre></td></tr></table></figure><h2 id="如何确定当前脚本所在的文件夹"><a href="# 如何确定当前脚本所在的文件夹" class="headerlink" title="如何确定当前脚本所在的文件夹"></a> 如何确定当前脚本所在的文件夹 </h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">print</span> os.path.dirname(os.path.realpath(__file__))</span><br></pre></td></tr></table></figure><h2 id="如何确定当前脚本所在的文件夹的父文件夹"><a href="# 如何确定当前脚本所在的文件夹的父文件夹" class="headerlink" title="如何确定当前脚本所在的文件夹的父文件夹"></a> 如何确定当前脚本所在的文件夹的父文件夹 </h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">print</span> os.path.dirname(os.path.dirname(os.path.realpath(__file__)))</span><br></pre></td></tr></table></figure><h2 id="一种编程方式"><a href="# 一种编程方式" class="headerlink" title="一种编程方式"></a> 一种编程方式 </h2><p> 在编写程序的时候，想要使用一些绝对路径相关的变量，会单独定义一个脚本如 <code>pathinfo.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">src_dir</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">return</span> os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">code_dir</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">return</span> os.path.dirname(src_dir())</span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_dir</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">return</span> code_dir()+<span class="string">'/log'</span></span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conf_dir</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">return</span> code_dir()+<span class="string">'/conf'</span></span><br></pre></td></tr></table></figure><p>这样，使用的时候 <code>import pathinfo</code> 即可</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何在 Ubuntu 中安装 hexo]]></title>
      <url>http://blog.zhaochunqi.com/2014/12/22/install-hexo/</url>
      <content type="html"><![CDATA[<h2 id="安装 -nvm"><a href="# 安装 -nvm" class="headerlink" title="安装 nvm"></a>安装 nvm</h2><p>cURL:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><p>Wget:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure><p></p><p>安装后重启 Terminal 。</p><blockquote><p>因为使用的是 zsh，所以最好在.zshrc 文件中加入这句 <code>source ~/.nvm/nvm.sh</code></p></blockquote><h2 id="安装 -NodeJS"><a href="# 安装 -NodeJS" class="headerlink" title="安装 NodeJS"></a> 安装 NodeJS</h2><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install 0.10 &amp;&amp; nvm use 0.10</span><br></pre></td></tr></table></figure><h3 id="安装 -Hexo"><a href="# 安装 -Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><blockquote><p>Hexo 的使用以及注意事项见 <a href="http://hexo.io/docs/" target="_blank" rel="external"> 链接</a></p></blockquote>]]></content>
    </entry>
    
  
  
</search>
